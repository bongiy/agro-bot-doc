from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ConversationHandler, MessageHandler, filters

(
    ADD_NAME, ADD_EDRPOU, ADD_BANK, ADD_TAX_GROUP, ADD_VAT, ADD_VAT_IPN,
    ADD_ADDRESS_LEGAL, ADD_ADDRESS_POSTAL, ADD_DIRECTOR, CONFIRM
) = range(10)

async def admin_tov_add_start(update, context):
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å <b>–Ω–∞–∑–≤—É –¢–û–í</b>:", parse_mode="HTML", reply_markup=ReplyKeyboardRemove())
    return ADD_NAME

async def admin_tov_add_name(update, context):
    context.user_data['new_tov'] = {'name': update.message.text.strip()}
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å <b>–Ñ–î–†–ü–û–£</b>:", parse_mode="HTML")
    return ADD_EDRPOU

async def admin_tov_add_edrpou(update, context):
    context.user_data['new_tov']['edrpou'] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å <b>—Ä/—Ä (IBAN)</b>:", parse_mode="HTML")
    return ADD_BANK

async def admin_tov_add_bank(update, context):
    context.user_data['new_tov']['bank_account'] = update.message.text.strip()
    kb = ReplyKeyboardMarkup([["3 –≥—Ä—É–ø–∞", "4 –≥—Ä—É–ø–∞"], ["–ó–∞–≥–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞"]], resize_keyboard=True)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å <b>–≥—Ä—É–ø—É –æ–ø–æ–¥–∞—Ç–∫—É–≤–∞–Ω–Ω—è</b>:", parse_mode="HTML", reply_markup=kb)
    return ADD_TAX_GROUP

async def admin_tov_add_tax_group(update, context):
    context.user_data['new_tov']['tax_group'] = update.message.text.strip()
    kb = ReplyKeyboardMarkup([["–¢–∞–∫", "–ù—ñ"]], resize_keyboard=True)
    await update.message.reply_text("–ß–∏ —î –∫–æ–º–ø–∞–Ω—ñ—è –ø–ª–∞—Ç–Ω–∏–∫–æ–º –ü–î–í?", reply_markup=kb)
    return ADD_VAT

async def admin_tov_add_vat(update, context):
    answer = update.message.text.strip()
    context.user_data['new_tov']['is_vat_payer'] = (answer == "–¢–∞–∫")
    if answer == "–¢–∞–∫":
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å <b>–Ü–ü–ù –ø–ª–∞—Ç–Ω–∏–∫–∞ –ü–î–í</b>:", parse_mode="HTML", reply_markup=ReplyKeyboardRemove())
        return ADD_VAT_IPN
    else:
        context.user_data['new_tov']['vat_ipn'] = None
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å <b>—é—Ä–∏–¥–∏—á–Ω—É –∞–¥—Ä–µ—Å—É</b>:", parse_mode="HTML", reply_markup=ReplyKeyboardRemove())
        return ADD_ADDRESS_LEGAL

async def admin_tov_add_vat_ipn(update, context):
    context.user_data['new_tov']['vat_ipn'] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å <b>—é—Ä–∏–¥–∏—á–Ω—É –∞–¥—Ä–µ—Å—É</b>:", parse_mode="HTML")
    return ADD_ADDRESS_LEGAL

async def admin_tov_add_address_legal(update, context):
    context.user_data['new_tov']['address_legal'] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å <b>–ø–æ—à—Ç–æ–≤—É –∞–¥—Ä–µ—Å—É</b>:", parse_mode="HTML")
    return ADD_ADDRESS_POSTAL

async def admin_tov_add_address_postal(update, context):
    context.user_data['new_tov']['address_postal'] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å <b>–ü–Ü–ë –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞</b>:", parse_mode="HTML")
    return ADD_DIRECTOR

async def admin_tov_add_director(update, context):
    context.user_data['new_tov']['director'] = update.message.text.strip()
    tov = context.user_data['new_tov']
    vat_payer = "–¢–∞–∫" if tov['is_vat_payer'] else "–ù—ñ"
    text = (
        f"<b>–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω—ñ:</b>\n"
        f"–ù–∞–∑–≤–∞: <code>{tov['name']}</code>\n"
        f"–Ñ–î–†–ü–û–£: <code>{tov['edrpou']}</code>\n"
        f"—Ä/—Ä: <code>{tov['bank_account']}</code>\n"
        f"–ì—Ä—É–ø–∞ –æ–ø–æ–¥–∞—Ç–∫—É–≤–∞–Ω–Ω—è: <code>{tov['tax_group']}</code>\n"
        f"–ü–ª–∞—Ç–Ω–∏–∫ –ü–î–í: <code>{vat_payer}</code>\n"
        f"–Ü–ü–ù –ø–ª–∞—Ç–Ω–∏–∫–∞ –ü–î–í: <code>{tov.get('vat_ipn', '')}</code>\n"
        f"–Æ—Ä–∏–¥–∏—á–Ω–∞ –∞–¥—Ä–µ—Å–∞: <code>{tov['address_legal']}</code>\n"
        f"–ü–æ—à—Ç–æ–≤–∞ –∞–¥—Ä–µ—Å–∞: <code>{tov['address_postal']}</code>\n"
        f"–î–∏—Ä–µ–∫—Ç–æ—Ä: <code>{tov['director']}</code>\n\n"
        "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è?"
    )
    kb = ReplyKeyboardMarkup([["‚úÖ –¢–∞–∫", "‚Ü©Ô∏è –ê–¥–º—ñ–Ω–ø–∞–Ω–µ–ª—å"]], resize_keyboard=True)
    await update.message.reply_text(text, parse_mode="HTML", reply_markup=kb)
    return CONFIRM

async def admin_tov_add_confirm(update, context):
    if update.message.text == "‚úÖ –¢–∞–∫":
        tov = context.user_data['new_tov']
        from db import add_company  # —ñ–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è
        await add_company(tov)
        await update.message.reply_text("‚úÖ –ù–æ–≤–µ –¢–û–í —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!", reply_markup=None)
    else:
        await update.message.reply_text("–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=None)
    context.user_data.pop('new_tov', None)
    from keyboards.menu import admin_tov_menu
    await update.message.reply_text("üè¢ –ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –¢–û–í-–æ—Ä–µ–Ω–¥–∞—Ä—ñ–≤:", reply_markup=admin_tov_menu)
    return ConversationHandler.END

# === –û–≥–æ–ª–æ—à–µ–Ω–Ω—è FSM ===
admin_tov_add_conv = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^‚ûï –î–æ–¥–∞—Ç–∏ –¢–û–í$"), admin_tov_add_start)],
    states={
        0: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_tov_add_name)],
        1: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_tov_add_edrpou)],
        2: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_tov_add_bank)],
        3: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_tov_add_tax_group)],
        4: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_tov_add_vat)],
        5: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_tov_add_vat_ipn)],
        6: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_tov_add_address_legal)],
        7: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_tov_add_address_postal)],
        8: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_tov_add_director)],
        9: [MessageHandler(filters.Regex("^(‚úÖ –¢–∞–∫|‚Ü©Ô∏è –ê–¥–º—ñ–Ω–ø–∞–Ω–µ–ª—å)$"), admin_tov_add_confirm)]
    },
    fallbacks=[]
)
