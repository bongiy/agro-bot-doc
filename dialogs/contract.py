import os
import unicodedata
import re
from datetime import datetime, timedelta
from typing import Any
import logging

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InputFile,
)
from telegram.error import BadRequest
from telegram.ext import (
    ConversationHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

from db import (
    database,
    Company,
    Contract,
    ContractLandPlot,
    AgreementTemplate,
    LandPlot,
    LandPlotOwner,
    Payer,
    UploadedDocs,
)
from keyboards.menu import contracts_menu
from dialogs.post_creation import prompt_add_docs
from ftp_utils import download_file_ftp, delete_file_ftp
from contract_generation_v2 import (
    generate_contract_v2,
    format_area,
    format_money,
    format_share,
)
from template_utils import analyze_template, build_unresolved_message
import sqlalchemy

logger = logging.getLogger(__name__)

status_values = {
    "signed": "üü° –ü—ñ–¥–ø–∏—Å–∞–Ω–∏–π",
    "sent_for_registration": "üü† –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é",
    "returned_for_correction": "üî¥ –ü–æ–≤–µ—Ä–Ω—É—Ç–æ –∑ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–∞ –¥–æ–æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è",
    "registered": "üü¢ –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –≤ –î–†–†–ü",
}

CHOOSE_COMPANY, SET_DURATION, SET_VALID_FROM, CHOOSE_PAYER, INPUT_LANDS, SET_RENT, SEARCH_LAND = range(7)

BACK_BTN = "‚óÄÔ∏è –ù–∞–∑–∞–¥"  # ‚óÄÔ∏è –ù–∞–∑–∞–¥
CANCEL_BTN = "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"  # ‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏

# Callback data for navigation buttons
BACK_CB = "contract_back"
CANCEL_CB = "contract_cancel"

# Inline keyboards for navigation
cancel_kb = InlineKeyboardMarkup([[InlineKeyboardButton(CANCEL_BTN, callback_data=CANCEL_CB)]])
back_cancel_kb = InlineKeyboardMarkup([
    [InlineKeyboardButton(BACK_BTN, callback_data=BACK_CB),
     InlineKeyboardButton(CANCEL_BTN, callback_data=CANCEL_CB)]
])


def to_latin_filename(text: str, default: str = "document.pdf") -> str:
    name = unicodedata.normalize("NFKD", str(text)).encode("ascii", "ignore").decode("ascii")
    name = name.replace(" ", "_")
    name = re.sub(r"[^A-Za-z0-9_.-]", "", name)
    if not name or name.startswith(".pdf") or name.lower() == ".pdf":
        return default
    if not name.lower().endswith(".pdf"):
        name += ".pdf"
    return name


def format_cadaster(text: str) -> str | None:
    """Normalize cadastral number to XXXXXX:XX:XXX:XXXX format."""
    digits = re.sub(r"\D", "", text)
    if len(digits) != 19:
        return None
    return f"{digits[:10]}:{digits[10:12]}:{digits[12:15]}:{digits[15:]}"


async def back_or_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE, step_back: int):
    """Handle back/cancel buttons for contract creation."""
    query = update.callback_query
    text = update.message.text if update.message else None
    if query:
        await query.answer()
        if query.data == CANCEL_CB:
            await query.message.reply_text(
                "‚ö†Ô∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–≥–æ–≤–æ—Ä—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –î–∞–Ω—ñ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.",
                reply_markup=contracts_menu,
            )
            context.user_data.clear()
            return ConversationHandler.END
        if query.data == BACK_CB:
            return step_back
    if text == CANCEL_BTN:
        await update.message.reply_text(
            "‚ö†Ô∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–≥–æ–≤–æ—Ä—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –î–∞–Ω—ñ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.",
            reply_markup=contracts_menu,
        )
        context.user_data.clear()
        return ConversationHandler.END
    if text == BACK_BTN:
        return step_back
    return None


async def contract_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Callback handler for inline back button."""
    query = update.callback_query
    await query.answer()
    state = context.user_data.get("current_state")
    if state == SET_DURATION:
        # Back to company selection
        companies = await database.fetch_all(sqlalchemy.select(Company))
        if not companies:
            await query.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ —Ö–æ—á–∞ –± –æ–¥–Ω–µ –¢–û–í!", reply_markup=contracts_menu)
            context.user_data.clear()
            return ConversationHandler.END
        kb = ReplyKeyboardMarkup(
            [[f"{c['id']}: {c['short_name'] or c['full_name']}"] for c in companies] + [[CANCEL_BTN]],
            resize_keyboard=True,
        )
        context.user_data["companies"] = {f"{c['id']}: {c['short_name'] or c['full_name']}": c["id"] for c in companies}
        await query.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¢–û–í-–æ—Ä–µ–Ω–¥–∞—Ä—è:", reply_markup=kb)
        await query.message.reply_text("‚¨áÔ∏è –ù–∞–≤—ñ–≥–∞—Ü—ñ—è", reply_markup=cancel_kb)
        context.user_data["current_state"] = CHOOSE_COMPANY
        return CHOOSE_COMPANY
    if state == SET_VALID_FROM:
        # Re-prompt duration step
        number = context.user_data.get("contract_number", "")
        await query.message.reply_text(
            f"–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä—É: <b>{number}</b>\n–í–≤–µ–¥—ñ—Ç—å —Å—Ç—Ä–æ–∫ –¥—ñ—ó –≤ —Ä–æ–∫–∞—Ö:",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup([[BACK_BTN, CANCEL_BTN]], resize_keyboard=True),
        )
        await query.message.reply_text("‚¨áÔ∏è –ù–∞–≤—ñ–≥–∞—Ü—ñ—è", reply_markup=back_cancel_kb)
        context.user_data["current_state"] = SET_DURATION
        return SET_DURATION
    if state == CHOOSE_PAYER:
        # Back to valid_from
        kb = ReplyKeyboardMarkup(
            [["–í—ñ–¥ —Å—å–æ–≥–æ–¥–Ω—ñ"], ["–ó 1 —Å—ñ—á–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–æ–∫—É"], [BACK_BTN, CANCEL_BTN]],
            resize_keyboard=True,
        )
        await query.message.reply_text("–î–∞—Ç–∞ –Ω–∞–±—Ä–∞–Ω–Ω—è —á–∏–Ω–Ω–æ—Å—Ç—ñ:", reply_markup=kb)
        await query.message.reply_text("‚¨áÔ∏è –ù–∞–≤—ñ–≥–∞—Ü—ñ—è", reply_markup=back_cancel_kb)
        context.user_data["current_state"] = SET_VALID_FROM
        return SET_VALID_FROM
    if state == INPUT_LANDS:
        # Back to choose payer
        payers = await database.fetch_all(
            sqlalchemy.select(Payer).order_by(Payer.c.id.desc()).limit(3)
        )
        kb = ReplyKeyboardMarkup(
            [[f"{p['id']}: {p['name']}"] for p in payers]
            + [["üîç –ü–æ—à—É–∫ –ø–∞–π–æ–≤–∏–∫–∞"], ["‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞–π–æ–≤–∏–∫–∞"], [BACK_BTN, CANCEL_BTN]],
            resize_keyboard=True,
        )
        context.user_data["recent_payers"] = {f"{p['id']}: {p['name']}": p["id"] for p in payers}
        await query.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –ø–∞–π–æ–≤–∏–∫–∞:", reply_markup=kb)
        await query.message.reply_text("‚¨áÔ∏è –ù–∞–≤—ñ–≥–∞—Ü—ñ—è", reply_markup=back_cancel_kb)
        context.user_data["current_state"] = CHOOSE_PAYER
        return CHOOSE_PAYER
    if state == SEARCH_LAND:
        # Back to input lands
        payer_id = context.user_data.get("payer_id")
        lands = await database.fetch_all(
            sqlalchemy.select(LandPlot)
            .join(LandPlotOwner, LandPlot.c.id == LandPlotOwner.c.land_plot_id)
            .where(LandPlotOwner.c.payer_id == payer_id)
        )
        if lands:
            land_list = " ".join(str(l["id"]) for l in lands)
            msg = (
                f"–î—ñ–ª—è–Ω–∫–∏ –ø–∞–π–æ–≤–∏–∫–∞: {land_list}\n"
                "–í–∫–∞–∂—ñ—Ç—å ID –¥—ñ–ª—è–Ω–æ–∫ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –ø–æ—à—É–∫–æ–º."
            )
        else:
            msg = "–£ —Ü—å–æ–≥–æ –ø–∞–π–æ–≤–∏–∫–∞ –Ω–µ–º–∞—î –¥—ñ–ª—è–Ω–æ–∫. –í–∫–∞–∂—ñ—Ç—å ID –≤—Ä—É—á–Ω—É –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –ø–æ—à—É–∫–æ–º."
        kb = ReplyKeyboardMarkup(
            [["üîç –ü–æ—à—É–∫ –¥—ñ–ª—è–Ω–∫–∏", "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏"], [BACK_BTN, CANCEL_BTN]],
            resize_keyboard=True,
        )
        await query.message.reply_text(msg, reply_markup=kb)
        await query.message.reply_text("‚¨áÔ∏è –ù–∞–≤—ñ–≥–∞—Ü—ñ—è", reply_markup=back_cancel_kb)
        context.user_data["current_state"] = INPUT_LANDS
        return INPUT_LANDS
    if state == SET_RENT:
        payer_id = context.user_data.get("payer_id")
        lands = await database.fetch_all(
            sqlalchemy.select(LandPlot)
            .join(LandPlotOwner, LandPlot.c.id == LandPlotOwner.c.land_plot_id)
            .where(LandPlotOwner.c.payer_id == payer_id)
        )
        if lands:
            land_list = " ".join(str(l["id"]) for l in lands)
            msg = (
                f"–î—ñ–ª—è–Ω–∫–∏ –ø–∞–π–æ–≤–∏–∫–∞: {land_list}\n"
                "–í–∫–∞–∂—ñ—Ç—å ID –¥—ñ–ª—è–Ω–æ–∫ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –ø–æ—à—É–∫–æ–º."
            )
        else:
            msg = "–£ —Ü—å–æ–≥–æ –ø–∞–π–æ–≤–∏–∫–∞ –Ω–µ–º–∞—î –¥—ñ–ª—è–Ω–æ–∫. –í–∫–∞–∂—ñ—Ç—å ID –≤—Ä—É—á–Ω—É –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –ø–æ—à—É–∫–æ–º."
        kb = ReplyKeyboardMarkup(
            [["üîç –ü–æ—à—É–∫ –¥—ñ–ª—è–Ω–∫–∏", "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏"], [BACK_BTN, CANCEL_BTN]],
            resize_keyboard=True,
        )
        await query.message.reply_text(msg, reply_markup=kb)
        await query.message.reply_text("‚¨áÔ∏è –ù–∞–≤—ñ–≥–∞—Ü—ñ—è", reply_markup=back_cancel_kb)
        context.user_data["current_state"] = INPUT_LANDS
        return INPUT_LANDS
    return step_back


async def contract_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancel contract creation via inline button."""
    query = update.callback_query
    await query.answer()
    await query.message.reply_text(
        "‚ö†Ô∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–≥–æ–≤–æ—Ä—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –î–∞–Ω—ñ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.",
        reply_markup=contracts_menu,
    )
    context.user_data.clear()
    return ConversationHandler.END


async def search_land(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle cadastral search within contract FSM."""
    result = await back_or_cancel(update, context, INPUT_LANDS)
    if result is not None:
        return result
    cad = format_cadaster(update.message.text)
    if not cad:
        await update.message.reply_text("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–∏–π –Ω–æ–º–µ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ:")
        return SEARCH_LAND
    row = await database.fetch_one(sqlalchemy.select(LandPlot).where(LandPlot.c.cadaster == cad))
    if not row:
        await update.message.reply_text("–î—ñ–ª—è–Ω–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await update.message.reply_text("‚¨áÔ∏è –ù–∞–≤—ñ–≥–∞—Ü—ñ—è", reply_markup=back_cancel_kb)
        context.user_data["current_state"] = INPUT_LANDS
        return INPUT_LANDS
    btn = InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –¥–æ –¥–æ–≥–æ–≤–æ—Ä—É", callback_data=f"add_land_to_contract:{row['id']}")
    await update.message.reply_text(
        f"ID {row['id']}: {row['cadaster']} ‚Äî {row['area']:.4f} –≥–∞",
        reply_markup=InlineKeyboardMarkup([[btn]]),
    )
    await update.message.reply_text("‚¨áÔ∏è –ù–∞–≤—ñ–≥–∞—Ü—ñ—è", reply_markup=back_cancel_kb)
    context.user_data["current_state"] = INPUT_LANDS
    return INPUT_LANDS


async def add_land_from_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Callback when user adds land from search results."""
    query = update.callback_query
    land_id = int(query.data.split(":")[1])
    context.user_data.setdefault("land_ids", []).append(land_id)
    await query.answer("–î–æ–¥–∞–Ω–æ –¥–æ –¥–æ–≥–æ–≤–æ—Ä—É")
    land_list = " ".join(map(str, context.user_data["land_ids"]))
    await query.message.reply_text(
        f"–î—ñ–ª—è–Ω–∫–∞ #{land_id} –¥–æ–¥–∞–Ω–∞. –ü–æ—Ç–æ—á–Ω–∏–π —Å–ø–∏—Å–æ–∫: {land_list}",
        reply_markup=ReplyKeyboardMarkup([[BACK_BTN, CANCEL_BTN]], resize_keyboard=True),
    )
    await query.message.reply_text("‚¨áÔ∏è –ù–∞–≤—ñ–≥–∞—Ü—ñ—è", reply_markup=back_cancel_kb)
    context.user_data["current_state"] = INPUT_LANDS
    return INPUT_LANDS


async def send_contract_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    _, _, contract_id, fname = query.data.split(":", 3)
    filename = to_latin_filename(fname)
    remote_path = f"contracts/{contract_id}/{filename}"
    tmp_path = f"temp_docs/{filename}"
    try:
        os.makedirs("temp_docs", exist_ok=True)
        download_file_ftp(remote_path, tmp_path)
        await query.message.reply_document(document=InputFile(tmp_path), filename=filename)
        os.remove(tmp_path)
    except Exception as e:  # pragma: no cover - just user notification
        await query.answer(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—á—É–≤–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É: {e}", show_alert=True)


# ==== –î–û–î–ê–í–ê–ù–ù–Ø –î–û–ì–û–í–û–†–£ ====
async def add_contract_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    companies = await database.fetch_all(sqlalchemy.select(Company))
    if not companies:
        await update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ —Ö–æ—á–∞ –± –æ–¥–Ω–µ –¢–û–í!", reply_markup=contracts_menu)
        return ConversationHandler.END
    kb = ReplyKeyboardMarkup(
        [[f"{c['id']}: {c['short_name'] or c['full_name']}"] for c in companies] + [[CANCEL_BTN]],
        resize_keyboard=True,
    )
    context.user_data["companies"] = {f"{c['id']}: {c['short_name'] or c['full_name']}": c["id"] for c in companies}
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¢–û–í-–æ—Ä–µ–Ω–¥–∞—Ä—è:", reply_markup=kb)
    await update.message.reply_text("‚¨áÔ∏è –ù–∞–≤—ñ–≥–∞—Ü—ñ—è", reply_markup=cancel_kb)
    context.user_data["current_state"] = CHOOSE_COMPANY
    return CHOOSE_COMPANY


async def choose_company(update: Update, context: ContextTypes.DEFAULT_TYPE):
    result = await back_or_cancel(update, context, CHOOSE_COMPANY)
    if result is not None:
        return result
    company_id = context.user_data["companies"].get(update.message.text)
    if not company_id:
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∫–æ–º–ø–∞–Ω—ñ—é –∑—ñ —Å–ø–∏—Å–∫—É:")
        return CHOOSE_COMPANY
    year = datetime.utcnow().year
    rows = await database.fetch_all(
        sqlalchemy.select(Contract.c.number).where(
            (Contract.c.company_id == company_id) & Contract.c.number.like(f"%/{year}")
        )
    )
    max_num = 0
    for r in rows:
        try:
            n = int(str(r["number"]).split("/")[0])
            if n > max_num:
                max_num = n
        except Exception:
            continue
    number = f"{max_num + 1:04d}/{year}"
    context.user_data["company_id"] = company_id
    context.user_data["contract_number"] = number
    await update.message.reply_text(
        f"–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä—É: <b>{number}</b>\n–í–≤–µ–¥—ñ—Ç—å —Å—Ç—Ä–æ–∫ –¥—ñ—ó –≤ —Ä–æ–∫–∞—Ö:",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup([[BACK_BTN, CANCEL_BTN]], resize_keyboard=True),
    )
    await update.message.reply_text("‚¨áÔ∏è –ù–∞–≤—ñ–≥–∞—Ü—ñ—è", reply_markup=back_cancel_kb)
    context.user_data["current_state"] = SET_DURATION
    return SET_DURATION


async def set_duration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    result = await back_or_cancel(update, context, CHOOSE_COMPANY)
    if result is not None:
        return result
    try:
        years = int(update.message.text)
        if years <= 0:
            raise ValueError
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª–µ —á–∏—Å–ª–æ —Ä–æ–∫—ñ–≤:")
        return SET_DURATION
    context.user_data["duration"] = years
    kb = ReplyKeyboardMarkup(
        [["–í—ñ–¥ —Å—å–æ–≥–æ–¥–Ω—ñ"], ["–ó 1 —Å—ñ—á–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–æ–∫—É"], [BACK_BTN, CANCEL_BTN]],
        resize_keyboard=True,
    )
    await update.message.reply_text("–î–∞—Ç–∞ –Ω–∞–±—Ä–∞–Ω–Ω—è —á–∏–Ω–Ω–æ—Å—Ç—ñ:", reply_markup=kb)
    await update.message.reply_text("‚¨áÔ∏è –ù–∞–≤—ñ–≥–∞—Ü—ñ—è", reply_markup=back_cancel_kb)
    context.user_data["current_state"] = SET_VALID_FROM
    return SET_VALID_FROM


async def set_valid_from(update: Update, context: ContextTypes.DEFAULT_TYPE):
    result = await back_or_cancel(update, context, SET_DURATION)
    if result is not None:
        return result
    text = update.message.text
    today = datetime.utcnow().date()
    if text == "–í—ñ–¥ —Å—å–æ–≥–æ–¥–Ω—ñ":
        valid_from = today
    else:
        valid_from = datetime(today.year + 1, 1, 1).date()
    duration = context.user_data["duration"]
    valid_to = valid_from + timedelta(days=365 * duration)
    context.user_data["valid_from"] = datetime.combine(valid_from, datetime.min.time())
    context.user_data["valid_to"] = datetime.combine(valid_to, datetime.min.time())
    payers = await database.fetch_all(
        sqlalchemy.select(Payer).order_by(Payer.c.id.desc()).limit(3)
    )
    kb = ReplyKeyboardMarkup(
        [[f"{p['id']}: {p['name']}"] for p in payers]
        + [["üîç –ü–æ—à—É–∫ –ø–∞–π–æ–≤–∏–∫–∞"], ["‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞–π–æ–≤–∏–∫–∞"], [BACK_BTN, CANCEL_BTN]],
        resize_keyboard=True,
    )
    context.user_data["recent_payers"] = {
        f"{p['id']}: {p['name']}": p["id"] for p in payers
    }
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –ø–∞–π–æ–≤–∏–∫–∞:", reply_markup=kb)
    await update.message.reply_text("‚¨áÔ∏è –ù–∞–≤—ñ–≥–∞—Ü—ñ—è", reply_markup=back_cancel_kb)
    context.user_data["current_state"] = CHOOSE_PAYER
    return CHOOSE_PAYER


async def choose_payer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    result = await back_or_cancel(update, context, SET_VALID_FROM)
    if result is not None:
        return result

    text = update.message.text
    payer_id = context.user_data.get("recent_payers", {}).get(text)
    if payer_id:
        context.user_data["payer_id"] = payer_id
    elif text in ("üîç –ü–æ—à—É–∫ –ø–∞–π–æ–≤–∏–∫–∞", "‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞–π–æ–≤–∏–∫–∞"):
        await update.message.reply_text("üîú –§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ")
        return CHOOSE_PAYER
    else:
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç –∑—ñ —Å–ø–∏—Å–∫—É")
        return CHOOSE_PAYER

    lands = await database.fetch_all(
        sqlalchemy.select(LandPlot)
        .join(LandPlotOwner, LandPlot.c.id == LandPlotOwner.c.land_plot_id)
        .where(LandPlotOwner.c.payer_id == payer_id)
    )
    context.user_data["land_ids"] = []
    if lands:
        land_list = " ".join(str(l["id"]) for l in lands)
        msg = (
            f"–î—ñ–ª—è–Ω–∫–∏ –ø–∞–π–æ–≤–∏–∫–∞: {land_list}\n"
            "–í–∫–∞–∂—ñ—Ç—å ID –¥—ñ–ª—è–Ω–æ–∫ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –ø–æ—à—É–∫–æ–º."
        )
    else:
        msg = "–£ —Ü—å–æ–≥–æ –ø–∞–π–æ–≤–∏–∫–∞ –Ω–µ–º–∞—î –¥—ñ–ª—è–Ω–æ–∫. –í–∫–∞–∂—ñ—Ç—å ID –≤—Ä—É—á–Ω—É –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –ø–æ—à—É–∫–æ–º."
    kb = ReplyKeyboardMarkup(
        [["üîç –ü–æ—à—É–∫ –¥—ñ–ª—è–Ω–∫–∏", "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏"], [BACK_BTN, CANCEL_BTN]],
        resize_keyboard=True,
    )
    await update.message.reply_text(msg, reply_markup=kb)
    await update.message.reply_text("‚¨áÔ∏è –ù–∞–≤—ñ–≥–∞—Ü—ñ—è", reply_markup=back_cancel_kb)
    context.user_data["current_state"] = INPUT_LANDS
    return INPUT_LANDS


async def save_contract(update: Update, context: ContextTypes.DEFAULT_TYPE):
    result = await back_or_cancel(update, context, CHOOSE_PAYER)
    if result is not None:
        return result
    text = update.message.text
    if text == "üîç –ü–æ—à—É–∫ –¥—ñ–ª—è–Ω–∫–∏":
        await update.message.reply_text(
            "–í–≤–µ–¥—ñ—Ç—å –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–∏–π –Ω–æ–º–µ—Ä:",
            reply_markup=ReplyKeyboardMarkup([[BACK_BTN, CANCEL_BTN]], resize_keyboard=True),
        )
        await update.message.reply_text("‚¨áÔ∏è –ù–∞–≤—ñ–≥–∞—Ü—ñ—è", reply_markup=back_cancel_kb)
        context.user_data["current_state"] = SEARCH_LAND
        return SEARCH_LAND
    if text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏":
        land_ids = context.user_data.get("land_ids", [])
        if not land_ids:
            await update.message.reply_text("–ù–µ –¥–æ–¥–∞–Ω–æ –∂–æ–¥–Ω–æ—ó –¥—ñ–ª—è–Ω–∫–∏.")
            return INPUT_LANDS
        invalid = []
        for lid in land_ids:
            total = await database.fetch_val(
                sqlalchemy.select(sqlalchemy.func.sum(LandPlotOwner.c.share)).where(
                    LandPlotOwner.c.land_plot_id == lid
                )
            )
            if total is None or abs(total - 1.0) > 0.01:
                invalid.append(lid)
        if invalid:
            await update.message.reply_text(
                f"‚ö†Ô∏è –ù–µ –æ—Ö–æ–ø–ª–µ–Ω–æ 100% —á–∞—Å—Ç–∫–∏ –ø–æ –¥—ñ–ª—è–Ω–∫–∞—Ö: {', '.join(map(str, invalid))}"
            )
            return INPUT_LANDS
        await update.message.reply_text(
            "–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –æ—Ä–µ–Ω–¥–Ω–æ—ó –ø–ª–∞—Ç–∏ (–≥—Ä–Ω):",
            reply_markup=ReplyKeyboardMarkup([[BACK_BTN, CANCEL_BTN]], resize_keyboard=True),
        )
        await update.message.reply_text("‚¨áÔ∏è –ù–∞–≤—ñ–≥–∞—Ü—ñ—è", reply_markup=back_cancel_kb)
        context.user_data["current_state"] = SET_RENT
        return SET_RENT
    else:
        try:
            new_ids = [int(i) for i in text.replace(",", " ").split() if i]
        except ValueError:
            await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å ID —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª:")
            return INPUT_LANDS
        if not new_ids:
            await update.message.reply_text("–ù–µ –≤–∫–∞–∑–∞–Ω–æ –∂–æ–¥–Ω–æ—ó –¥—ñ–ª—è–Ω–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
            return INPUT_LANDS
        context.user_data.setdefault("land_ids", []).extend(new_ids)
        land_list = " ".join(map(str, context.user_data["land_ids"]))
        await update.message.reply_text(
            f"–î–æ–¥–∞–Ω–æ: {' '.join(map(str, new_ids))}. –ü–æ—Ç–æ—á–Ω–∏–π —Å–ø–∏—Å–æ–∫: {land_list}\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏' –∫–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—Ç–µ.",
            reply_markup=ReplyKeyboardMarkup([["üîç –ü–æ—à—É–∫ –¥—ñ–ª—è–Ω–∫–∏", "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏"], [BACK_BTN, CANCEL_BTN]], resize_keyboard=True),
        )
        await update.message.reply_text("‚¨áÔ∏è –ù–∞–≤—ñ–≥–∞—Ü—ñ—è", reply_markup=back_cancel_kb)
        context.user_data["current_state"] = INPUT_LANDS
        return INPUT_LANDS
        
    # Should not reach here

async def set_rent_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    result = await back_or_cancel(update, context, INPUT_LANDS)
    if result is not None:
        return result
    text = update.message.text.replace(',', '.').strip()
    try:
        rent = float(text)
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è:")
        return SET_RENT
    context.user_data["rent_amount"] = rent
    land_ids = context.user_data.get("land_ids", [])
    now = datetime.utcnow()
    contract_id = await database.execute(
        Contract.insert().values(
            company_id=context.user_data["company_id"],
            payer_id=context.user_data["payer_id"],
            number=context.user_data["contract_number"],
            date_signed=now,
            date_valid_from=context.user_data["valid_from"],
            date_valid_to=context.user_data["valid_to"],
            duration_years=context.user_data["duration"],
            rent_amount=rent,
            status="signed",
            created_at=now,
        )
    )
    for lid in land_ids:
        await database.execute(
            ContractLandPlot.insert().values(contract_id=contract_id, land_plot_id=lid)
        )
    context.user_data.clear()
    await prompt_add_docs(
        update,
        context,
        "contract",
        contract_id,
        "–î–æ–≥–æ–≤—ñ—Ä —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!",
        contracts_menu,
    )
    return ConversationHandler.END

add_contract_conv = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–æ–≥–æ–≤—ñ—Ä$"), add_contract_start)],
    states={
        CHOOSE_COMPANY: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, choose_company),
            CallbackQueryHandler(contract_cancel, pattern=f"^{CANCEL_CB}$"),
        ],
        SET_DURATION: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, set_duration),
            CallbackQueryHandler(contract_back, pattern=f"^{BACK_CB}$"),
            CallbackQueryHandler(contract_cancel, pattern=f"^{CANCEL_CB}$"),
        ],
        SET_VALID_FROM: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, set_valid_from),
            CallbackQueryHandler(contract_back, pattern=f"^{BACK_CB}$"),
            CallbackQueryHandler(contract_cancel, pattern=f"^{CANCEL_CB}$"),
        ],
        CHOOSE_PAYER: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, choose_payer),
            CallbackQueryHandler(contract_back, pattern=f"^{BACK_CB}$"),
            CallbackQueryHandler(contract_cancel, pattern=f"^{CANCEL_CB}$"),
        ],
        INPUT_LANDS: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, save_contract),
            CallbackQueryHandler(add_land_from_search, pattern=r"^add_land_to_contract:\d+$"),
            CallbackQueryHandler(contract_back, pattern=f"^{BACK_CB}$"),
            CallbackQueryHandler(contract_cancel, pattern=f"^{CANCEL_CB}$"),
        ],
        SET_RENT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, set_rent_amount),
            CallbackQueryHandler(contract_back, pattern=f"^{BACK_CB}$"),
            CallbackQueryHandler(contract_cancel, pattern=f"^{CANCEL_CB}$"),
        ],
        SEARCH_LAND: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, search_land),
            CallbackQueryHandler(contract_back, pattern=f"^{BACK_CB}$"),
            CallbackQueryHandler(contract_cancel, pattern=f"^{CANCEL_CB}$"),
        ],
    },
    fallbacks=[],
)


# ==== –°–ü–ò–°–û–ö –¢–ê –ö–ê–†–¢–ö–ê ====
async def show_contracts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message if update.message else update.callback_query.message
    rows = await database.fetch_all(sqlalchemy.select(Contract))
    if not rows:
        await msg.reply_text("–î–æ–≥–æ–≤–æ—Ä–∏ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω—ñ.", reply_markup=contracts_menu)
        return
    companies = {}
    comp_ids = {r["company_id"] for r in rows}
    if comp_ids:
        comps = await database.fetch_all(sqlalchemy.select(Company).where(Company.c.id.in_(comp_ids)))
        companies = {c["id"]: c for c in comps}
    for r in rows:
        comp = companies.get(r["company_id"])
        cname = comp["short_name"] or comp["full_name"] if comp else "‚Äî"
        btn = InlineKeyboardButton("–ö–∞—Ä—Ç–∫–∞", callback_data=f"agreement_card:{r['id']}")
        await msg.reply_text(
            f"{r['id']}. {r['number']} ‚Äî {cname}",
            reply_markup=InlineKeyboardMarkup([[btn]]),
        )


async def agreement_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    contract_id = int(query.data.split(":")[1])
    contract = await database.fetch_one(sqlalchemy.select(Contract).where(Contract.c.id == contract_id))
    if not contract:
        await query.answer("–î–æ–≥–æ–≤—ñ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        return
    company = await database.fetch_one(sqlalchemy.select(Company).where(Company.c.id == contract["company_id"]))
    payer = await database.fetch_one(sqlalchemy.select(Payer).where(Payer.c.id == contract["payer_id"]))
    lands = await database.fetch_all(
        sqlalchemy.select(LandPlot).join(ContractLandPlot, LandPlot.c.id == ContractLandPlot.c.land_plot_id).where(
            ContractLandPlot.c.contract_id == contract_id
        )
    )
    land = lands[0] if lands else None
    docs_count = await database.fetch_val(
        sqlalchemy.select(sqlalchemy.func.count()).select_from(UploadedDocs).where(
            (UploadedDocs.c.entity_type == "contract") & (UploadedDocs.c.entity_id == contract_id)
        )
    )
    tmpl = None
    if contract["template_id"]:
        tmpl = await database.fetch_one(sqlalchemy.select(AgreementTemplate).where(AgreementTemplate.c.id == contract["template_id"]))
    template_name = tmpl["name"] if tmpl else "‚Äî"

    status_text = status_values.get(contract["status"], contract["status"] or "-")
    registration_block = ""
    if contract["status"] == "registered":
        reg_date = contract["registration_date"].strftime("%d.%m.%Y") if contract["registration_date"] else "-"
        registration_block = f"\n–ù–æ–º–µ—Ä —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {contract['registration_number']}\n–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {reg_date}"

    location = "‚Äî"
    if land:
        loc_parts = [land["council"], land["district"], land["region"]]
        location = ", ".join([p for p in loc_parts if p]) or "-"
    plot_txt = (
        f"–ö–∞–¥–∞—Å—Ç—Ä–æ–≤–∏–π –Ω–æ–º–µ—Ä: {land['cadaster']}\n"
        f"–ü–ª–æ—â–∞: {land['area']:.4f} –≥–∞\n"
        f"–ù–ì–û: {land['ngo'] if land['ngo'] else '-'} –≥—Ä–Ω\n"
        f"–†–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è: {location}"
    ) if land else "-"

    text = (
        f"üìÑ <b>–î–æ–≥–æ–≤—ñ—Ä –æ—Ä–µ–Ω–¥–∏ ‚Ññ{contract['number']}</b>\n"
        f"–ü—ñ–¥–ø–∏—Å–∞–Ω–æ: {contract['date_signed'].date()}\n"
        f"–°—Ç—Ä–æ–∫ –¥—ñ—ó: {contract['duration_years']} —Ä–æ–∫—ñ–≤ (–¥–æ {contract['date_valid_to'].date()})\n\n"
        f"üìå –°—Ç–∞—Ç—É—Å: {status_text}{registration_block}\n\n"
        f"üè¢ <b>–û—Ä–µ–Ω–¥–∞—Ä (–¢–û–í)</b>:\n"
        f"{company['short_name'] or company['full_name']}\n"
        f"–ö–æ–¥ –Ñ–î–†–ü–û–£: {company['edrpou']}\n"
        f"–î–∏—Ä–µ–∫—Ç–æ—Ä: {company['director']}\n\n"
        f"üë§ <b>–û—Ä–µ–Ω–¥–æ–¥–∞–≤–µ—Ü—å (–ø–∞–π–æ–≤–∏–∫)</b>:\n"
        f"{payer['name']}\n"
        f"–ü–∞—Å–ø–æ—Ä—Ç: {payer['passport_series'] or ''} {payer['passport_number'] or ''}\n"
        f"–Ü–ü–ù: {payer['ipn']}\n"
        f"–ê–¥—Ä–µ—Å–∞: {payer['oblast']} –æ–±–ª., {payer['rayon']} —Ä-–Ω, {payer['selo']}, {payer['vul']} {payer['bud']} {payer['kv'] or ''}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {payer['phone'] or '-'}\n"
        f"–ö–∞—Ä—Ç–∫–∞: {payer['bank_card'] or '-'}\n\n"
        f"üìç <b>–î—ñ–ª—è–Ω–∫–∞</b>:\n{plot_txt}\n\n"
        f"üí∞ <b>–û—Ä–µ–Ω–¥–Ω–∞ –ø–ª–∞—Ç–∞</b>: {contract['rent_amount']} –≥—Ä–Ω/—Ä—ñ–∫\n\n"
        f"üìé –®–∞–±–ª–æ–Ω: {template_name}\n\n"
        f"üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏: {docs_count} —Ñ–∞–π–ª–∞(—ñ–≤)"
    )
    buttons = [
        [InlineKeyboardButton("üìÑ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –¥–æ–≥–æ–≤—ñ—Ä (docx/pdf)", callback_data=f"generate_contract_pdf:{contract_id}")],
        [InlineKeyboardButton("üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data=f"edit_contract:{contract_id}")],
        [InlineKeyboardButton("üìå –ó–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å", callback_data=f"change_status:{contract_id}")],
        [InlineKeyboardButton("üìÅ –î–æ–∫—É–º–µ–Ω—Ç–∏", callback_data=f"contract_docs:{contract_id}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –î–æ —Å–ø–∏—Å–∫—É", callback_data="to_contracts")],
    ]
    await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(buttons), parse_mode="HTML")

# old name for compatibility
contract_card = agreement_card


async def to_contracts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_contracts(update, context)


# ==== –î–û–ö–£–ú–ï–ù–¢–ò –î–û–ì–û–í–û–†–£ ====
async def contract_docs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    contract_id = int(query.data.split(":")[1])
    docs = await database.fetch_all(
        sqlalchemy.select(UploadedDocs).where(
            (UploadedDocs.c.entity_type == "contract") &
            (UploadedDocs.c.entity_id == contract_id)
        )
    )
    keyboard = [
        [InlineKeyboardButton("üì∑ –î–æ–¥–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç", callback_data=f"add_docs:contract:{contract_id}")]
    ]
    for d in docs:
        keyboard.append([
            InlineKeyboardButton(f"‚¨áÔ∏è {d['doc_type']}", callback_data=f"send_pdf:{d['id']}"),
            InlineKeyboardButton("üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_pdf_db:{d['id']}")
        ])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"agreement_card:{contract_id}")])
    text = "üìé –î–æ–∫—É–º–µ–Ω—Ç–∏ –¥–æ–≥–æ–≤–æ—Ä—É:" if docs else "–î–æ–∫—É–º–µ–Ω—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ."
    await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(keyboard))


# ==== –í–ò–î–ê–õ–ï–ù–ù–Ø –î–û–ì–û–í–û–†–£ ====
async def delete_contract_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    contract_id = int(query.data.split(":")[1])
    from db import get_user_by_tg_id
    user = await get_user_by_tg_id(update.effective_user.id)
    if not user or user["role"] != "admin":
        await query.answer("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è.", show_alert=True)
        return
    contract = await database.fetch_one(sqlalchemy.select(Contract).where(Contract.c.id == contract_id))
    if not contract:
        await query.answer("–î–æ–≥–æ–≤—ñ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        return
    text = (
        f"–í–∏ —Ç–æ—á–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –¥–æ–≥–æ–≤—ñ—Ä <b>{contract['number']}</b>?\n"
        "–¶—é –¥—ñ—é –Ω–µ –º–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏."
    )
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"confirm_delete_contract:{contract_id}")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"agreement_card:{contract_id}")],
    ])
    try:
        await query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    except BadRequest as exc:
        if "message is not modified" not in str(exc).lower():
            raise


async def delete_contract(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    contract_id = int(query.data.split(":")[1])
    from db import get_user_by_tg_id, log_delete
    user = await get_user_by_tg_id(update.effective_user.id)
    if not user or user["role"] != "admin":
        await query.answer("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è.", show_alert=True)
        return
    contract = await database.fetch_one(sqlalchemy.select(Contract).where(Contract.c.id == contract_id))
    if not contract:
        await query.answer("–î–æ–≥–æ–≤—ñ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        return
    docs = await database.fetch_all(
        sqlalchemy.select(UploadedDocs).where(
            (UploadedDocs.c.entity_type == "contract") &
            (UploadedDocs.c.entity_id == contract_id)
        )
    )
    for d in docs:
        try:
            delete_file_ftp(d["remote_path"])
        except Exception:
            pass
    if docs:
        await database.execute(UploadedDocs.delete().where(UploadedDocs.c.id.in_([d["id"] for d in docs])))
    await database.execute(ContractLandPlot.delete().where(ContractLandPlot.c.contract_id == contract_id))
    await database.execute(Contract.delete().where(Contract.c.id == contract_id))
    linked = f"docs:{len(docs)}" if docs else ""
    await log_delete(update.effective_user.id, user["role"], "contract", contract_id, contract["number"], linked)
    await query.message.edit_text("‚úÖ –û–± º—î–∫—Ç —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ")


# ==== –ì–ï–ù–ï–†–ê–¶–Ü–Ø PDF –î–û–ì–û–í–û–†–£ ====
async def generate_contract_pdf_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query

    contract_id = int(query.data.split(":")[1])
    contract = await database.fetch_one(sqlalchemy.select(Contract).where(Contract.c.id == contract_id))
    if not contract:
        await query.answer("–î–æ–≥–æ–≤—ñ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        return

    try:
        remote_path, gen_log = await generate_contract_v2(contract_id)
    except Exception:
        logger.exception("Failed to generate contract PDF")
        await query.message.edit_text(
            "‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ PDF. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —à–∞–±–ª–æ–Ω –∞–±–æ –¥–∞–Ω—ñ –¥–æ–≥–æ–≤–æ—Ä—É.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"agreement_card:{contract_id}")]]
            ),
        )
        return

    row = await database.fetch_one(
        sqlalchemy.select(UploadedDocs.c.id)
        .where(
            (UploadedDocs.c.entity_type == "contract")
            & (UploadedDocs.c.entity_id == contract_id)
            & (UploadedDocs.c.doc_type == "generated")
        )
        .order_by(UploadedDocs.c.id.desc())
    )
    doc_id = row["id"] if row else None

    from db import get_agreement_templates
    templates = await get_agreement_templates(True)
    template_name = os.path.basename(templates[0]["file_path"]) if templates else ""

    is_pdf = str(remote_path).lower().endswith(".pdf")

    if gen_log:
        await query.message.reply_text(gen_log)

    warn_text = (
        "‚ö†Ô∏è PDF –Ω–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ ‚Äî –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏.\n"
        "üìÑ –ù–∞–¥–∞—î–º–æ –¥–æ–≥–æ–≤—ñ—Ä —É —Ñ–æ—Ä–º–∞—Ç—ñ DOCX.\n\n"
        if not is_pdf
        else ""
    )

    keyboard = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(
                    "üìé –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ PDF" if is_pdf else "üìé –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ DOCX",
                    callback_data=f"send_pdf:{doc_id}",
                )
            ],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"agreement_card:{contract_id}")],
        ]
    )

    await query.message.edit_text(
        warn_text
        + f"‚úÖ –î–æ–≥–æ–≤—ñ—Ä –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ\nüìê –®–∞–±–ª–æ–Ω: {os.path.basename(template_name)}\n"
        f"üìÜ –î—ñ—î –∑ {contract['date_valid_from'].date()} –ø–æ {contract['date_valid_to'].date()}",
        reply_markup=keyboard,
    )

# ==== –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø –î–û–ì–û–í–û–†–£ (—Å–ø—Ä–æ—â–µ–Ω–µ) ====
EDIT_SIGNED, EDIT_DURATION, EDIT_START, EDIT_RENT, EDIT_LANDS = range(5)


async def edit_contract_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    contract_id = int(query.data.split(":")[1])
    contract = await database.fetch_one(sqlalchemy.select(Contract).where(Contract.c.id == contract_id))
    if not contract:
        await query.answer("–î–æ–≥–æ–≤—ñ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        return ConversationHandler.END
    context.user_data["edit_contract_id"] = contract_id
    context.user_data["contract_old"] = contract
    await query.message.edit_text(
        f"–ü–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞ –ø—ñ–¥–ø–∏—Å–∞–Ω–Ω—è: {contract['date_signed'].date()}\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –¥–∞—Ç—É (–î–î.–ú–ú.–†–†–†–†) –∞–±–æ '-' —â–æ–± –∑–∞–ª–∏—à–∏—Ç–∏ –±–µ–∑ –∑–º—ñ–Ω:")
    return EDIT_SIGNED


async def edit_contract_signed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    contract = context.user_data["contract_old"]
    if text != "-":
        try:
            dt = datetime.strptime(text, "%d.%m.%Y")
            context.user_data["new_signed"] = dt
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–† –∞–±–æ '-'")
            return EDIT_SIGNED
    else:
        context.user_data["new_signed"] = contract["date_signed"]
    await update.message.reply_text(
        f"–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç—Ä–æ–∫ –¥—ñ—ó: {contract['duration_years']} —Ä–æ–∫—ñ–≤. –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ—Ä–º—ñ–Ω –∞–±–æ '-' —â–æ–± –Ω–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏:")
    return EDIT_DURATION


async def edit_contract_duration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    contract = context.user_data["contract_old"]
    if text != "-":
        try:
            years = int(text)
            if years <= 0:
                raise ValueError
            context.user_data["new_duration"] = years
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª–µ —á–∏—Å–ª–æ –∞–±–æ '-'")
            return EDIT_DURATION
    else:
        context.user_data["new_duration"] = contract["duration_years"]
    await update.message.reply_text(
        f"–ü–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É: {contract['date_valid_from'].date()}\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –¥–∞—Ç—É (–î–î.–ú–ú.–†–†–†–†) –∞–±–æ '-' —â–æ–± –Ω–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏:")
    return EDIT_START


async def edit_contract_start_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    contract = context.user_data["contract_old"]
    if text != "-":
        try:
            dt = datetime.strptime(text, "%d.%m.%Y")
            context.user_data["new_start"] = dt
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–† –∞–±–æ '-'")
            return EDIT_START
    else:
        context.user_data["new_start"] = contract["date_valid_from"]
    await update.message.reply_text(
        f"–ü–æ—Ç–æ—á–Ω–∞ —Å—É–º–∞ –æ—Ä–µ–Ω–¥–∏: {contract['rent_amount']}\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Å—É–º—É –∞–±–æ '-' —â–æ–± –Ω–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏:")
    return EDIT_RENT


async def edit_contract_rent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.replace(',', '.').strip()
    contract = context.user_data["contract_old"]
    if text != "-":
        try:
            rent = float(text)
            context.user_data["new_rent"] = rent
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∞–±–æ '-'")
            return EDIT_RENT
    else:
        context.user_data["new_rent"] = float(contract["rent_amount"])
    rows = await database.fetch_all(
        sqlalchemy.select(ContractLandPlot.c.land_plot_id).where(ContractLandPlot.c.contract_id == context.user_data["edit_contract_id"])
    )
    current_ids = " ".join(str(r["land_plot_id"]) for r in rows)
    await update.message.reply_text(
        f"–ü–æ—Ç–æ—á–Ω—ñ –¥—ñ–ª—è–Ω–∫–∏: {current_ids}\n–í–≤–µ–¥—ñ—Ç—å —Å–ø–∏—Å–æ–∫ ID —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª –∞–±–æ '-' —â–æ–± –Ω–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏:")
    return EDIT_LANDS


async def edit_contract_lands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    contract_id = context.user_data["edit_contract_id"]
    if text != "-":
        try:
            land_ids = [int(i) for i in text.replace(',', ' ').split() if i]
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å ID —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª –∞–±–æ '-'")
            return EDIT_LANDS
    else:
        rows = await database.fetch_all(
            sqlalchemy.select(ContractLandPlot.c.land_plot_id).where(ContractLandPlot.c.contract_id == contract_id)
        )
        land_ids = [r["land_plot_id"] for r in rows]
    new_signed = context.user_data["new_signed"]
    new_start = context.user_data["new_start"]
    new_duration = context.user_data["new_duration"]
    new_end = new_start + timedelta(days=365 * new_duration)
    new_rent = context.user_data["new_rent"]
    await database.execute(
        Contract.update()
        .where(Contract.c.id == contract_id)
        .values(
            date_signed=new_signed,
            date_valid_from=new_start,
            date_valid_to=new_end,
            duration_years=new_duration,
            rent_amount=new_rent,
            updated_at=datetime.utcnow(),
        )
    )
    await database.execute(ContractLandPlot.delete().where(ContractLandPlot.c.contract_id == contract_id))
    for lid in land_ids:
        await database.execute(ContractLandPlot.insert().values(contract_id=contract_id, land_plot_id=lid))
    context.user_data.clear()
    await update.message.reply_text("‚úÖ –ó–º—ñ–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ", reply_markup=contracts_menu)
    return ConversationHandler.END


edit_contract_conv = ConversationHandler(
    entry_points=[CallbackQueryHandler(edit_contract_start, pattern=r"^edit_contract:\d+$")],
    states={
        EDIT_SIGNED: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_contract_signed)],
        EDIT_DURATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_contract_duration)],
        EDIT_START: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_contract_start_date)],
        EDIT_RENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_contract_rent)],
        EDIT_LANDS: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_contract_lands)],
    },
    fallbacks=[],
)


# ==== –ó–ú–Ü–ù–ê –°–¢–ê–¢–£–°–£ –î–û–ì–û–í–û–†–£ ====
CHANGE_STATUS, REG_NUMBER, REG_DATE = range(3)


async def change_status_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    contract_id = int(query.data.split(":")[1])
    context.user_data["status_contract_id"] = contract_id
    keyboard = [
        [InlineKeyboardButton(text, callback_data=f"select_status:{key}")]
        for key, text in status_values.items()
    ]
    keyboard.append([InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"agreement_card:{contract_id}")])
    await query.message.edit_text("–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å:", reply_markup=InlineKeyboardMarkup(keyboard))
    return CHANGE_STATUS


async def select_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    status = query.data.split(":")[1]
    context.user_data["new_status"] = status
    contract_id = context.user_data.get("status_contract_id")
    if status == "registered":
        await query.message.edit_text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:")
        return REG_NUMBER
    await database.execute(
        Contract.update()
        .where(Contract.c.id == contract_id)
        .values(status=status, registration_number=None, registration_date=None, updated_at=datetime.utcnow())
    )
    await query.message.edit_text("‚úÖ –°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ", reply_markup=InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"agreement_card:{contract_id}")]
    ]))
    context.user_data.clear()
    return ConversationHandler.END


async def input_reg_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["registration_number"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó (–î–î.–ú–ú.–†–†–†–†):")
    return REG_DATE


async def input_reg_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    try:
        reg_date = datetime.strptime(text, "%d.%m.%Y").date()
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†:")
        return REG_DATE
    contract_id = context.user_data.get("status_contract_id")
    await database.execute(
        Contract.update()
        .where(Contract.c.id == contract_id)
        .values(
            status=context.user_data.get("new_status", "registered"),
            registration_number=context.user_data.get("registration_number"),
            registration_date=reg_date,
            updated_at=datetime.utcnow(),
        )
    )
    context.user_data.clear()
    await update.message.reply_text(
        "‚úÖ –°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"agreement_card:{contract_id}")]])
    )
    return ConversationHandler.END


change_status_conv = ConversationHandler(
    entry_points=[CallbackQueryHandler(change_status_start, pattern=r"^change_status:\d+$")],
    states={
        CHANGE_STATUS: [CallbackQueryHandler(select_status, pattern=r"^select_status:\w+$")],
        REG_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_reg_number)],
        REG_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_reg_date)],
    },
    fallbacks=[],
)
