from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from keyboards.menu import fields_menu
from db import database, Field
import sqlalchemy

async def show_fields(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = sqlalchemy.select(Field)
    fields = await database.fetch_all(query)
    if not fields:
        await update.message.reply_text("–ü–æ–ª—è —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω—ñ.", reply_markup=fields_menu)
        return
    for f in fields:
        btn = InlineKeyboardButton("–ö–∞—Ä—Ç–∫–∞", callback_data=f"field_card:{f['id']}")
        await update.message.reply_text(
            f"{f['id']}. {f['name']} ‚Äî {f['area_actual']:.4f} –≥–∞",
            reply_markup=InlineKeyboardMarkup([[btn]])
        )

async def field_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    field_id = int(query.data.split(":")[1])
    field = await database.fetch_one(sqlalchemy.select(Field).where(Field.c.id == field_id))
    if not field:
        await query.answer("–ü–æ–ª–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return
    text = (
        f"<b>–ö–∞—Ä—Ç–∫–∞ –ø–æ–ª—è</b>\n"
        f"ID: {field['id']}\n"
        f"–ù–∞–∑–≤–∞: {field['name']}\n"
        f"–ü–ª–æ—â–∞ —Ñ–∞–∫—Ç–∏—á–Ω–∞: {field['area_actual']:.4f} –≥–∞"
    )
    kb = [
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data=f"edit_field:{field['id']}")],
        [InlineKeyboardButton("üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_field:{field['id']}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –î–æ —Å–ø–∏—Å–∫—É", callback_data="to_fields_list")]
    ]
    await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(kb), parse_mode="HTML")

async def delete_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    field_id = int(query.data.split(":")[1])
    from db import LandPlot
    linked = await database.fetch_one(
        sqlalchemy.select(LandPlot).where(LandPlot.c.field_id == field_id)
    )
    if linked:
        await query.answer("–ù–µ –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–ª–µ ‚Äî –¥–æ –Ω—å–æ–≥–æ –ø—Ä–∏–≤'—è–∑–∞–Ω—ñ –¥—ñ–ª—è–Ω–∫–∏.", show_alert=True)
        return
    await database.execute(Field.delete().where(Field.c.id == field_id))
    await query.answer("–ü–æ–ª–µ –≤–∏–¥–∞–ª–µ–Ω–æ!")
    await query.message.edit_text("–ü–æ–ª–µ –≤–∏–¥–∞–ª–µ–Ω–æ.")

# –î–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É (–∑ callback-–∫–Ω–æ–ø–∫–∏)
async def to_fields_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_fields(update, context)
