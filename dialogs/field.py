from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove, InputFile
)
from telegram.ext import (
    ContextTypes, ConversationHandler, MessageHandler, filters
)
from keyboards.menu import fields_menu
from db import database, Field, UploadedDocs
import sqlalchemy
from ftp_utils import download_file_ftp, delete_file_ftp  # <-- –¥–æ–¥–∞—î–º–æ FTP-—É—Ç–∏–ª—ñ—Ç–∏

# --- –°—Ç–∞–Ω–∏ –¥–ª—è FSM –¥–æ–¥–∞–≤–∞–Ω–Ω—è ---
ASK_FIELD_NAME, ASK_FIELD_AREA = range(2)

# ==== –î–û–î–ê–í–ê–ù–ù–Ø –ü–û–õ–Ø ====
async def add_field_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø–æ–ª—è:", reply_markup=ReplyKeyboardRemove())
    return ASK_FIELD_NAME

async def add_field_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["field_name"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Ñ–∞–∫—Ç–∏—á–Ω—É –ø–ª–æ—â—É –ø–æ–ª—è, –≥–∞:")
    return ASK_FIELD_AREA

async def add_field_area(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        area = float(update.message.text.replace(",", "."))
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –ø–ª–æ—â–∞. –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑:")
        return ASK_FIELD_AREA
    name = context.user_data["field_name"]
    query = Field.insert().values(name=name, area_actual=area)
    await database.execute(query)
    await update.message.reply_text(
        f"–ü–æ–ª–µ '{name}' ({area:.4f} –≥–∞) –¥–æ–¥–∞–Ω–æ.",
        reply_markup=fields_menu
    )
    context.user_data.clear()
    return ConversationHandler.END

add_field_conv = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^‚ûï –î–æ–¥–∞—Ç–∏ –ø–æ–ª–µ$"), add_field_start)],
    states={
        ASK_FIELD_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_field_name)],
        ASK_FIELD_AREA: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_field_area)],
    },
    fallbacks=[]
)

# ==== –°–ü–ò–°–û–ö –ü–û–õ–Ü–í ====
async def show_fields(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message if update.message else update.callback_query.message
    query = sqlalchemy.select(Field)
    fields = await database.fetch_all(query)
    if not fields:
        await msg.reply_text("–ü–æ–ª—è —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω—ñ.", reply_markup=fields_menu)
        return
    for f in fields:
        btn = InlineKeyboardButton("–ö–∞—Ä—Ç–∫–∞", callback_data=f"field_card:{f['id']}")
        await msg.reply_text(
            f"{f['id']}. {f['name']} ‚Äî {f['area_actual']:.4f} –≥–∞",
            reply_markup=InlineKeyboardMarkup([[btn]])
        )

# ==== –ö–ê–†–¢–ö–ê –ü–û–õ–Ø ====
async def field_card(update, context):
    query = update.callback_query
    field_id = int(query.data.split(":")[1])
    field = await database.fetch_one(sqlalchemy.select(Field).where(Field.c.id == field_id))
    if not field:
        await query.answer("–ü–æ–ª–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return
    text = (
        f"<b>–ö–∞—Ä—Ç–∫–∞ –ø–æ–ª—è</b>\n"
        f"ID: {field['id']}\n"
        f"–ù–∞–∑–≤–∞: {field['name']}\n"
        f"–ü–ª–æ—â–∞ —Ñ–∞–∫—Ç–∏—á–Ω–∞: {field['area_actual']:.4f} –≥–∞"
    )
    kb = []

    # –î–æ–¥–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –¥–æ –ø–æ–ª—è
    kb.append([InlineKeyboardButton(
        "üì∑ –î–æ–¥–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏", callback_data=f"add_docs:field:{field['id']}"
    )])

    # –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–≥–ª—è–¥—É/–≤–∏–¥–∞–ª–µ–Ω–Ω—è PDF –¥–ª—è –ø–æ–ª—è
    docs = await database.fetch_all(
        sqlalchemy.select(UploadedDocs)
        .where((UploadedDocs.c.entity_type == "field") & (UploadedDocs.c.entity_id == field_id))
    )
    for doc in docs:
        kb.append([
            InlineKeyboardButton(f"‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ PDF", callback_data=f"send_pdf:{doc['id']}"),
            InlineKeyboardButton(f"üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_pdf_db:{doc['id']}")
        ])

    # –Ü–Ω—à—ñ –∫–Ω–æ–ø–∫–∏
    kb.extend([
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data=f"edit_field:{field['id']}")],
        [InlineKeyboardButton("üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_field:{field['id']}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –î–æ —Å–ø–∏—Å–∫—É", callback_data="to_fields_list")]
    ])

    await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(kb), parse_mode="HTML")

# ==== –í–ò–î–ê–õ–ï–ù–ù–Ø –ü–û–õ–Ø ====
async def delete_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    field_id = int(query.data.split(":")[1])
    from db import LandPlot
    linked = await database.fetch_one(
        sqlalchemy.select(LandPlot).where(LandPlot.c.field_id == field_id)
    )
    if linked:
        await query.answer("–ù–µ –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–ª–µ ‚Äî –¥–æ –Ω—å–æ–≥–æ –ø—Ä–∏–≤'—è–∑–∞–Ω—ñ –¥—ñ–ª—è–Ω–∫–∏.", show_alert=True)
        return
    await database.execute(Field.delete().where(Field.c.id == field_id))
    await query.answer("–ü–æ–ª–µ –≤–∏–¥–∞–ª–µ–Ω–æ!")
    await query.message.edit_text("–ü–æ–ª–µ –≤–∏–¥–∞–ª–µ–Ω–æ.")

# ==== –í–ò–î–ê–õ–ï–ù–ù–Ø PDF (—á–µ—Ä–µ–∑ FTP) ====
async def delete_pdf(update, context):
    query = update.callback_query
    doc_id = int(query.data.split(":")[1])
    row = await database.fetch_one(sqlalchemy.select(UploadedDocs).where(UploadedDocs.c.id == doc_id))
    if row:
        try:
            delete_file_ftp(row['remote_path'])
        except Exception:
            pass  # —ñ–≥–Ω–æ—Ä—É—î–º–æ, —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ FTP
        await database.execute(UploadedDocs.delete().where(UploadedDocs.c.id == doc_id))
        await query.answer("–î–æ–∫—É–º–µ–Ω—Ç –≤–∏–¥–∞–ª–µ–Ω–æ!")
        await query.message.edit_text("–î–æ–∫—É–º–µ–Ω—Ç –≤–∏–¥–∞–ª–µ–Ω–æ. –û–Ω–æ–≤—ñ—Ç—å –∫–∞—Ä—Ç–∫—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–º—ñ–Ω.")
    else:
        await query.answer("–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)

# ==== –°–ö–ê–ß–£–í–ê–ù–ù–Ø PDF —á–µ—Ä–µ–∑ FTP ====
async def send_pdf(update, context):
    query = update.callback_query
    doc_id = int(query.data.split(":")[1])
    row = await database.fetch_one(sqlalchemy.select(UploadedDocs).where(UploadedDocs.c.id == doc_id))
    if row:
        remote_path = row['remote_path']
        filename = remote_path.split('/')[-1]
        tmp_path = f"temp_docs/{filename}"
        try:
            os.makedirs("temp_docs", exist_ok=True)
            download_file_ftp(remote_path, tmp_path)
            await query.message.reply_document(document=InputFile(tmp_path), filename=filename)
            os.remove(tmp_path)
        except Exception as e:
            await query.answer(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—á—É–≤–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É: {e}", show_alert=True)
    else:
        await query.answer("–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)

# ==== –ü–û–í–ï–†–ù–ï–ù–ù–Ø –î–û –°–ü–ò–°–ö–£ ====
async def to_fields_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_fields(update, context)

# ==== –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø –ü–û–õ–Ø (–ó–ê–ì–õ–£–®–ö–ê ‚Äî –ø–µ—Ä–µ–Ω–µ—Å–∏ –≤ edit_field.py) ====
async def edit_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    field_id = int(query.data.split(":")[1])
    await query.answer()
    await query.message.reply_text(f"‚úèÔ∏è –§—É–Ω–∫—Ü—ñ—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–ª—è #{field_id} —É —Ä–æ–∑—Ä–æ–±—Ü—ñ.")
