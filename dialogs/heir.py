import os
from datetime import datetime
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)
from db import database, Payer, add_heir as db_add_heir, transfer_assets_to_heir
from ftp_utils import upload_file_ftp

# FSM states
CONFIRM, HEIR_ID, COLLECT_DOCS, PAYMENT = range(4)

BACK_BTN = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
CANCEL_BTN = "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"
back_cancel_keyboard = ReplyKeyboardMarkup(
    [[BACK_BTN, CANCEL_BTN]], resize_keyboard=True
)

ALLOWED_EXT = {"pdf", "jpg", "jpeg", "png"}

async def start_add_heir(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Entry point for adding heir."""
    query = update.callback_query
    deceased_id = int(query.data.split(":")[1])
    payer = await database.fetch_one(Payer.select().where(Payer.c.id == deceased_id))
    if not payer:
        await query.answer("–ü–∞–π–æ–≤–∏–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π", show_alert=True)
        return ConversationHandler.END
    if not payer["is_deceased"]:
        await query.answer("–ü–∞–π–æ–≤–∏–∫ –Ω–µ –º–∞—î —Å—Ç–∞—Ç—É—Å—É '–ü–æ–º–µ—Ä'", show_alert=True)
        return ConversationHandler.END
    context.user_data.clear()
    context.user_data["deceased_id"] = deceased_id
    context.user_data["docs"] = []
    await query.message.edit_text(
        f"–î–æ–¥–∞—î–º–æ —Å–ø–∞–¥–∫–æ—î–º—Ü—è –¥–ª—è <b>{payer['name']}</b> üïØ\n–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –¥—ñ—é.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏", callback_data="heir_confirm")],
            [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="heir_cancel")],
        ]),
        parse_mode="HTML",
    )
    return CONFIRM

async def confirm_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query.data == "heir_cancel":
        await query.message.edit_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ")
        context.user_data.clear()
        return ConversationHandler.END
    keyboard = [
        [InlineKeyboardButton("üîç –Ü—Å–Ω—É—é—á–∏–π –ø–∞–π–æ–≤–∏–∫", callback_data="heir_existing")],
        [InlineKeyboardButton("‚ûï –ù–æ–≤–∏–π —Å–ø–∞–¥–∫–æ—î–º–µ—Ü—å", callback_data="heir_new")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="heir_cancel")],
    ]
    await query.message.edit_text(
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return HEIR_ID

async def choose_heir(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query.data == "heir_cancel":
        await query.message.edit_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ")
        context.user_data.clear()
        return ConversationHandler.END
    if query.data == "heir_new":
        await query.message.edit_text(
            "–°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –ø–∞–π–æ–≤–∏–∫–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é ¬´‚ûï –î–æ–¥–∞—Ç–∏ –ø–∞–π–æ–≤–∏–∫–∞¬ª.\n"
            "–ü—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—É—Å—Ç—ñ—Ç—å –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å–ø–∞–¥–∫–æ—î–º—Ü—è —Ç–∞ –æ–±–µ—Ä—ñ—Ç—å \"–Ü—Å–Ω—É—é—á–∏–π –ø–∞–π–æ–≤–∏–∫\".")
        return ConversationHandler.END
    await query.message.edit_text(
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å ID —ñ—Å–Ω—É—é—á–æ–≥–æ —Å–ø–∞–¥–∫–æ—î–º—Ü—è:",
        reply_markup=back_cancel_keyboard,
    )
    return HEIR_ID

async def receive_heir_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text == CANCEL_BTN:
        await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ", reply_markup=ReplyKeyboardRemove())
        context.user_data.clear()
        return ConversationHandler.END
    if text == BACK_BTN:
        await update.message.reply_text(
            "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîç –Ü—Å–Ω—É—é—á–∏–π –ø–∞–π–æ–≤–∏–∫", callback_data="heir_existing")],
                [InlineKeyboardButton("‚ûï –ù–æ–≤–∏–π —Å–ø–∞–¥–∫–æ—î–º–µ—Ü—å", callback_data="heir_new")],
                [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="heir_cancel")],
            ]),
        )
        return HEIR_ID
    if not text.isdigit():
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–∏–π ID", reply_markup=back_cancel_keyboard)
        return HEIR_ID
    heir_id = int(text)
    deceased_id = context.user_data.get("deceased_id")
    if heir_id == deceased_id:
        await update.message.reply_text("ID —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å. –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π ID", reply_markup=back_cancel_keyboard)
        return HEIR_ID
    heir = await database.fetch_one(Payer.select().where(Payer.c.id == heir_id))
    if not heir:
        await update.message.reply_text("–ü–∞–π–æ–≤–∏–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=back_cancel_keyboard)
        return HEIR_ID
    context.user_data["heir_id"] = heir_id
    await update.message.reply_text(
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –¥–æ 3 —Ñ–∞–π–ª—ñ–≤ (PDF/JPEG/PNG) –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è. –ö–æ–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å \"–ì–æ—Ç–æ–≤–æ\".",
        reply_markup=ReplyKeyboardMarkup(
            [["–ì–æ—Ç–æ–≤–æ", CANCEL_BTN]], resize_keyboard=True
        ),
    )
    return COLLECT_DOCS

async def collect_docs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–ì–æ—Ç–æ–≤–æ":
        return await finish_docs(update, context)
    if update.message.text == CANCEL_BTN:
        await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ", reply_markup=ReplyKeyboardRemove())
        context.user_data.clear()
        return ConversationHandler.END
    docs = context.user_data.setdefault("docs", [])
    if len(docs) >= 3:
        await update.message.reply_text("–í–∏ –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏ 3 —Ñ–∞–π–ª–∏. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ì–æ—Ç–æ–≤–æ'.")
        return COLLECT_DOCS
    file = None
    filename = None
    if update.message.document:
        file = await update.message.document.get_file()
        filename = update.message.document.file_name
    elif update.message.photo:
        file = await update.message.photo[-1].get_file()
        filename = f"photo_{datetime.utcnow().timestamp()}.jpg"
    else:
        await update.message.reply_text("–ù–µ–≤—ñ–¥–æ–º–∏–π —Ñ–æ—Ä–º–∞—Ç. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª –∞–±–æ —Ñ–æ—Ç–æ.")
        return COLLECT_DOCS
    ext = filename.split(".")[-1].lower()
    if ext not in ALLOWED_EXT:
        await update.message.reply_text("–î–æ–∑–≤–æ–ª–µ–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏: PDF, JPEG, PNG")
        return COLLECT_DOCS
    os.makedirs("temp_docs", exist_ok=True)
    local_path = os.path.join("temp_docs", filename)
    await file.download_to_drive(local_path)
    remote_path = f"heirs/{context.user_data['deceased_id']}/{filename}"
    try:
        upload_file_ftp(local_path, remote_path)
        docs.append(remote_path)
        await update.message.reply_text("–§–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —â–µ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ì–æ—Ç–æ–≤–æ'.")
    finally:
        if os.path.exists(local_path):
            os.remove(local_path)
    return COLLECT_DOCS

async def finish_docs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    docs = context.user_data.get("docs", [])
    deceased_id = context.user_data.get("deceased_id")
    heir_id = context.user_data.get("heir_id")
    await db_add_heir(deceased_id, heir_id, documents=docs)
    land_cnt, contract_cnt = await transfer_assets_to_heir(deceased_id, heir_id)
    await update.message.reply_text(
        "–°–ø–∞–¥–∫–æ—î–º—Ü—è –¥–æ–¥–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove()
    )
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–¢–∞–∫", callback_data="pay_yes"), InlineKeyboardButton("–ù—ñ", callback_data="pay_no")]
    ])
    await update.message.reply_text(
        f"–ü–µ—Ä–µ–¥–∞–Ω–æ {land_cnt} –¥—ñ–ª—è–Ω–æ–∫ —Ç–∞ {contract_cnt} –¥–æ–≥–æ–≤–æ—Ä—ñ–≤.\n"
        "–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –≤–∏–ø–ª–∞—Ç–∏—Ç–∏ —Å–ø–∞–¥–∫–æ—î–º—Ü—é –∑–∞—Ä–∞–∑?",
        reply_markup=keyboard,
    )
    return PAYMENT

async def payment_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query.data == "pay_yes":
        await query.message.edit_text("–í–∏–ø–ª–∞—Ç–∞ –ø–æ–∫–∏ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞.")
    else:
        await query.message.edit_text("–ì–æ—Ç–æ–≤–æ.")
    context.user_data.clear()
    return ConversationHandler.END

add_heir_conv = ConversationHandler(
    entry_points=[CallbackQueryHandler(start_add_heir, pattern=r"^add_heir:\d+$")],
    states={
        CONFIRM: [CallbackQueryHandler(confirm_step, pattern=r"^heir_(confirm|cancel)$")],
        HEIR_ID: [CallbackQueryHandler(choose_heir, pattern=r"^heir_(existing|new|cancel)$"),
                  MessageHandler(filters.TEXT & ~filters.COMMAND, receive_heir_id)],
        COLLECT_DOCS: [MessageHandler(filters.Document.ALL | filters.PHOTO | filters.TEXT, collect_docs)],
        PAYMENT: [CallbackQueryHandler(payment_step, pattern=r"^pay_(yes|no)$")],
    },
    fallbacks=[],
    allow_reentry=True,
)
