from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from keyboards.menu import lands_menu
from db import database, LandPlot, Field
import sqlalchemy

async def show_lands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = sqlalchemy.select(LandPlot)
    lands = await database.fetch_all(query)
    if not lands:
        await update.message.reply_text("–î—ñ–ª—è–Ω–∫–∏ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω—ñ.", reply_markup=lands_menu)
        return
    field_ids = {l['field_id'] for l in lands if l['field_id']}
    fields_map = {}
    if field_ids:
        fields = await database.fetch_all(sqlalchemy.select(Field).where(Field.c.id.in_(field_ids)))
        fields_map = {f['id']: f['name'] for f in fields}
    for l in lands:
        fname = fields_map.get(l['field_id'], '‚Äî')
        btn = InlineKeyboardButton("–ö–∞—Ä—Ç–∫–∞", callback_data=f"land_card:{l['id']}")
        await update.message.reply_text(
            f"{l['id']}. {l['cadaster']} ‚Äî {l['area']:.4f} –≥–∞, –ø–æ–ª–µ: {fname}",
            reply_markup=InlineKeyboardMarkup([[btn]])
        )

async def land_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    land_id = int(query.data.split(":")[1])
    land = await database.fetch_one(sqlalchemy.select(LandPlot).where(LandPlot.c.id == land_id))
    field_name = "‚Äî"
    if land and land['field_id']:
        field = await database.fetch_one(sqlalchemy.select(Field).where(Field.c.id == land['field_id']))
        if field:
            field_name = field['name']
    if not land:
        await query.answer("–î—ñ–ª—è–Ω–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
        return
    text = (
        f"<b>–ö–∞—Ä—Ç–∫–∞ –¥—ñ–ª—è–Ω–∫–∏</b>\n"
        f"ID: {land['id']}\n"
        f"–ö–∞–¥–∞—Å—Ç—Ä: {land['cadaster']}\n"
        f"–ü–ª–æ—â–∞: {land['area']:.4f} –≥–∞\n"
        f"–ù–ì–û: {land['ngo'] if land['ngo'] else '-'}\n"
        f"–ü–æ–ª–µ: {field_name}"
    )
    kb = [
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data=f"edit_land:{land['id']}")],
        [InlineKeyboardButton("üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_land:{land['id']}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –î–æ —Å–ø–∏—Å–∫—É", callback_data="to_lands_list")]
    ]
    await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(kb), parse_mode="HTML")

async def delete_land(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    land_id = int(query.data.split(":")[1])
    await database.execute(LandPlot.delete().where(LandPlot.c.id == land_id))
    await query.answer("–î—ñ–ª—è–Ω–∫—É –≤–∏–¥–∞–ª–µ–Ω–æ!")
    await query.message.edit_text("–î—ñ–ª—è–Ω–∫—É –≤–∏–¥–∞–ª–µ–Ω–æ.")

# –î–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É (–∑ callback-–∫–Ω–æ–ø–∫–∏)
async def to_lands_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_lands(update, context)
