from telegram import Update, InputFile
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    CallbackQueryHandler,
    CommandHandler,
    filters,
)

from handlers.menu import admin_only
from dialogs.payer import to_menu
from db import get_land_overview
from keyboards.reports import report_nav_kb
from utils.reports import land_overview_to_excel
from contract_generation_v2 import format_money

(
    LO_SHOW,
) = range(1)


@admin_only
async def land_overview_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = await update.message.reply_text("–§–æ—Ä–º—É—é –∑–≤—ñ—Ç...")
    summary, fields, companies, statuses, contracts = await get_land_overview()

    lines: list[str] = [
        "üìä <b>–£–∑–∞–≥–∞–ª—å–Ω–µ–Ω–∏–π –∑–≤—ñ—Ç –ø–æ –¥—ñ–ª—è–Ω–∫–∞—Ö</b>",
        f"üî¢ –î—ñ–ª—è–Ω–æ–∫: {summary['plots']}",
        f"üìè –ü–ª–æ—â–∞: {summary['area']:.2f} –≥–∞",
        f"üí∞ –ù–ì–û: {format_money(summary['ngo'])}",
        f"üë§ –ü–∞–π–æ–≤–∏–∫—ñ–≤: {summary['payers']}",
        f"üìÑ –î–æ–≥–æ–≤–æ—Ä—ñ–≤: {summary['contracts']}",
        f"üè¢ –¢–û–í: {summary['companies']}",
    ]

    if fields:
        lines.append("\nüåæ <b>–ü–æ –ø–æ–ª—è—Ö:</b>")
        for f in fields:
            lines.append(
                f"‚Ä¢ {f['name'] or '‚Äî'}: {f['plots']} –¥—ñ–ª—è–Ω–æ–∫, {float(f['area'] or 0):.2f} –≥–∞"
            )

    if contracts:
        lines.append("\nüßæ <b>–ü–æ –¥–æ–≥–æ–≤–æ—Ä–∞—Ö:</b>")
        for c in contracts:
            lines.append(
                f"‚Ä¢ {c['number']}: {c['plots']} –¥—ñ–ª—è–Ω–æ–∫, {float(c['area'] or 0):.2f} –≥–∞"
            )

    if statuses:
        lines.append("\nüìç <b>–ü–æ —Å—Ç–∞—Ç—É—Å–∞—Ö:</b>")
        for s in statuses:
            status_name = "–ó –¥–æ–≥–æ–≤–æ—Ä–æ–º" if s["status"] == "with_contract" else "–ë–µ–∑ –¥–æ–≥–æ–≤–æ—Ä—É"
            lines.append(
                f"‚Ä¢ {status_name} ‚Äî {s['plots']} –¥—ñ–ª—è–Ω–æ–∫ ({float(s['area'] or 0):.2f} –≥–∞)"
            )

    await msg.edit_text("\n".join(lines), reply_markup=report_nav_kb(False, False), parse_mode="HTML")
    return LO_SHOW


@admin_only
async def land_overview_export_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    summary, fields, companies, statuses, _ = await get_land_overview()
    bio = await land_overview_to_excel(summary, fields, companies, statuses)
    await query.message.reply_document(
        document=InputFile(bio, filename="land_overview.xlsx")
    )
    await query.answer()
    return LO_SHOW


land_overview_conv = ConversationHandler(
    entry_points=[
        MessageHandler(
            filters.Regex("^üìã –£–∑–∞–≥–∞–ª—å–Ω–µ–Ω–∏–π –∑–≤—ñ—Ç –ø–æ –¥—ñ–ª—è–Ω–∫–∞—Ö$"), land_overview_start
        )
    ],
    states={
        LO_SHOW: [CallbackQueryHandler(land_overview_export_cb, pattern=r"^payrep_export$")],
    },
    fallbacks=[CommandHandler("start", to_menu)],
)
