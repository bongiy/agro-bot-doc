from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    CallbackQueryHandler,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from keyboards.menu import (
    main_menu, main_menu_admin,
    payers_menu, lands_menu, fields_menu, contracts_menu,
    payments_menu, reports_menu, search_menu, admin_panel_menu, admin_tov_menu,
    admin_templates_menu
)
from db import (
    get_companies,
    get_company,
    delete_company,
    get_user_by_tg_id,
    add_user,
    get_users,
    update_user,
    log_admin_action,
    log_delete,
)
from dialogs.agreement_template import (
    show_templates_cb, add_template_conv, replace_template_conv,
    template_card_cb, template_toggle_cb, template_delete_cb, template_list_cb,
    template_vars_cb, template_vars_categories_cb, template_var_list_cb
)

(
    ADD_USER_ID,
    ADD_USER_NAME,
    CHANGE_ROLE_ID,
    CHANGE_ROLE_ROLE,
    BLOCK_USER_ID,
    CHANGE_NAME_ID,
    CHANGE_NAME_NAME,
) = range(7)

def admin_only(handler):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = update.effective_user.id
        user = await get_user_by_tg_id(user_id)
        if not user or user['role'] != 'admin' or not user['is_active']:
            msg = getattr(update, 'message', None)
            if msg:
                await msg.reply_text('‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó.')
            else:
                await update.callback_query.answer('‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó.', show_alert=True)
            return
        return await handler(update, context, *args, **kwargs)
    return wrapper

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = update.effective_user.id
    username = update.effective_user.username
    user = await get_user_by_tg_id(tg_id)
    if not user:
        full_name = update.effective_user.full_name
        await add_user(tg_id, username=username, full_name=full_name)
        user_role = "user"
    else:
        user_role = user["role"]
    await update.message.reply_text(
        "–í—ñ—Ç–∞—î–º–æ! –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
        reply_markup=main_menu_admin if user_role == "admin" else main_menu
    )

async def to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = await get_user_by_tg_id(update.effective_user.id)
    role = user["role"] if user else "user"
    await update.message.reply_text(
        "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
        reply_markup=main_menu_admin if role == "admin" else main_menu
    )

async def payers_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ú–µ–Ω—é ¬´–ü–∞–π–æ–≤–∏–∫–∏¬ª", reply_markup=payers_menu)

async def lands_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ú–µ–Ω—é ¬´–î—ñ–ª—è–Ω–∫–∏¬ª", reply_markup=lands_menu)

async def fields_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ú–µ–Ω—é ¬´–ü–æ–ª—è¬ª", reply_markup=fields_menu)

async def contracts_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ú–µ–Ω—é ¬´–î–æ–≥–æ–≤–æ—Ä–∏¬ª", reply_markup=contracts_menu)

async def payments_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ú–µ–Ω—é ¬´–í–∏–ø–ª–∞—Ç–∏¬ª", reply_markup=payments_menu)

async def reports_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ú–µ–Ω—é ¬´–ó–≤—ñ—Ç–∏¬ª", reply_markup=reports_menu)

async def search_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ú–µ–Ω—é ¬´–ü–æ—à—É–∫¬ª", reply_markup=search_menu)

# --- –ê–î–ú–Ü–ù–ü–ê–ù–ï–õ–¨ ---

@admin_only
async def admin_panel_handler(update, context):

    text = (
        "üõ°Ô∏è <b>–ê–¥–º—ñ–Ω–ø–∞–Ω–µ–ª—å</b>:\n\n"
        "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è:"
    )

    msg = getattr(update, 'message', None)
    if msg:
        await msg.reply_text(text, parse_mode="HTML", reply_markup=admin_panel_menu)  # —Ç—É—Ç –º–æ–∂–µ –±—É—Ç–∏ ReplyKeyboardMarkup
    else:
        # –¢–£–¢ –æ–±–æ–≤ º—è–∑–∫–æ–≤–æ –º–∞—î –±—É—Ç–∏ InlineKeyboardMarkup!
        await update.callback_query.edit_message_text(
            text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup([])
        )


@admin_only
async def admin_tov_handler(update, context):
    msg = getattr(update, 'message', None)
    text = "üè¢ –ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –¢–û–í-–æ—Ä–µ–Ω–¥–∞—Ä—ñ–≤:\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    reply_markup = admin_tov_menu
    if msg:
        await msg.reply_text(text, reply_markup=reply_markup)
    else:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)

# --- –°–ø–∏—Å–æ–∫ –¢–û–í (–∫–Ω–æ–ø–∫–∞) ---
@admin_only
async def admin_tov_list_handler(update, context):
    companies = await get_companies()
    text = "<b>–°–ø–∏—Å–æ–∫ –¢–û–í-–æ—Ä–µ–Ω–¥–∞—Ä—ñ–≤:</b>\n–û–±–µ—Ä—ñ—Ç—å –∫–æ–º–ø–∞–Ω—ñ—é –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–∞—Ä—Ç–∫–∏."
    if not companies:
        text = "–ù–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –¢–û–í-–æ—Ä–µ–Ω–¥–∞—Ä—è."
    keyboard = [
        [InlineKeyboardButton(
            f"{c['short_name'] or c['full_name']}", callback_data=f"company_card:{c['id']}")]
        for c in companies
    ] if companies else []
    inline_kb = InlineKeyboardMarkup(keyboard)
    msg = getattr(update, 'message', None)
    if msg:
        await msg.reply_text(
            text, reply_markup=inline_kb, parse_mode="HTML"
        )
    else:
        await update.callback_query.edit_message_text(
            text, reply_markup=inline_kb, parse_mode="HTML"
        )

# --- –ö–∞—Ä—Ç–∫–∞ –¢–û–í (CallbackQuery) ---
@admin_only
async def admin_company_card_callback(update, context):
    query = update.callback_query
    company_id = int(query.data.split(":")[1])
    company = await get_company(company_id)
    if not company:
        await query.answer("–¢–û–í –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        return
    text = (
        f"<b>–ö–∞—Ä—Ç–∫–∞ –¢–û–í-–æ—Ä–µ–Ω–¥–∞—Ä—è</b>\n"
        f"<b>–û–ü–§:</b> <code>{company['opf']}</code>\n"
        f"<b>–ü–æ–≤–Ω–∞ –Ω–∞–∑–≤–∞:</b> <code>{company['full_name']}</code>\n"
        f"<b>–°–∫–æ—Ä–æ—á–µ–Ω–∞ –Ω–∞–∑–≤–∞:</b> <code>{company['short_name']}</code>\n"
        f"<b>–Ñ–î–†–ü–û–£:</b> <code>{company['edrpou']}</code>\n"
        f"<b>IBAN:</b> <code>{company['bank_account']}</code>\n"
        f"<b>–ì—Ä—É–ø–∞ –æ–ø–æ–¥–∞—Ç–∫—É–≤–∞–Ω–Ω—è:</b> <code>{company['tax_group']}</code>\n"
        f"<b>–ü–î–í:</b> <code>{'—Ç–∞–∫' if company['is_vat_payer'] else '–Ω—ñ'}</code>\n"
        f"<b>–Ü–ü–ù –ø–ª–∞—Ç–Ω–∏–∫–∞ –ü–î–í:</b> <code>{company['vat_ipn'] or '‚Äî'}</code>\n"
        f"<b>–Æ—Ä–∏–¥–∏—á–Ω–∞ –∞–¥—Ä–µ—Å–∞:</b> <code>{company['address_legal']}</code>\n"
        f"<b>–ü–æ—à—Ç–æ–≤–∞ –∞–¥—Ä–µ—Å–∞:</b> <code>{company['address_postal']}</code>\n"
        f"<b>–î–∏—Ä–µ–∫—Ç–æ—Ä:</b> <code>{company['director']}</code>\n"
    )
    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data=f"company_edit:{company_id}")],
        [InlineKeyboardButton("üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"company_delete:{company_id}")],
        [InlineKeyboardButton("‚Ü©Ô∏è –î–æ —Å–ø–∏—Å–∫—É –¢–û–í", callback_data="company_list")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ê–¥–º—ñ–Ω–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
    ]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")

@admin_only
async def company_delete_prompt(update, context):
    query = update.callback_query
    company_id = int(query.data.split(":")[1])
    company = await get_company(company_id)
    if not company:
        await query.answer("–¢–û–í –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        return
    text = (
        f"–í–∏ —Ç–æ—á–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ <b>{company['short_name'] or company['full_name']}</b>?\n"
        "–¶—é –¥—ñ—é –Ω–µ –º–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏."
    )
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"company_delete_confirm:{company_id}")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"company_card:{company_id}")],
    ])
    await query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

@admin_only
async def company_delete_confirm(update, context):
    query = update.callback_query
    company_id = int(query.data.split(":")[1])
    company = await get_company(company_id)
    if not company:
        await query.answer("–¢–û–í –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        return
    await delete_company(company_id)
    from db import log_delete, get_user_by_tg_id
    user = await get_user_by_tg_id(update.effective_user.id)
    await log_delete(update.effective_user.id, user["role"], "company", company_id, company["short_name"] or company["full_name"], "")
    await query.message.edit_text("‚úÖ –û–± º—î–∫—Ç —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ")

# --- Stub-—Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —ñ–Ω—à–∏—Ö —Ä–æ–∑–¥—ñ–ª—ñ–≤ –∞–¥–º—ñ–Ω–∫–∏ ---

@admin_only
async def admin_templates_handler(update, context):
    msg = getattr(update, 'message', None)
    if msg:
        await msg.reply_text("–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç —à–∞–±–ª–æ–Ω—ñ–≤ –¥–æ–≥–æ–≤–æ—Ä—ñ–≤:", reply_markup=admin_templates_menu)
    else:
        await show_templates_cb(update, context)


@admin_only
async def admin_users_handler(update, context):
    keyboard = [
        [InlineKeyboardButton("\U0001F4C4 –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", callback_data="user_list")],
        [InlineKeyboardButton("\u2795 –î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", callback_data="user_add")],
        [InlineKeyboardButton("\U0001F501 –ó–º—ñ–Ω–∏—Ç–∏ —Ä–æ–ª—å", callback_data="user_role")],
        [InlineKeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –ü–Ü–ë", callback_data="user_fullname")],
        [InlineKeyboardButton("\U0001F6AB –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è", callback_data="user_block")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ê–¥–º—ñ–Ω–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
    ]
    msg = getattr(update, 'message', None)
    if msg:
        await msg.reply_text(
            "–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await update.callback_query.edit_message_text(
            "–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

@admin_only
async def admin_user_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    users = await get_users()
    lines = [
        f"{u['full_name'] or '‚Äî'} / <code>{u['telegram_id']}</code> / {u['role']}"
        for u in users
    ]
    text = '<b>–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤</b>:\n' + ("\n".join(lines) if lines else "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_users")]]
    await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")


@admin_only
async def add_user_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.message.edit_text(
        "–í–≤–µ–¥—ñ—Ç—å Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_users")]])
    )
    return ADD_USER_ID


@admin_only
async def add_user_get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        tg_id = int(update.message.text.strip())
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–∏–π ID:")
        return ADD_USER_ID
    user = await get_user_by_tg_id(tg_id)
    if user:
        await update.message.reply_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î.")
        return ADD_USER_ID
    context.user_data['new_user_id'] = tg_id
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:")
    return ADD_USER_NAME


@admin_only
async def add_user_finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = context.user_data.pop('new_user_id', None)
    if tg_id is None:
        await update.message.reply_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return ConversationHandler.END
    full_name = update.message.text.strip()
    await add_user(tg_id, full_name=full_name)
    await log_admin_action(update.effective_user.id, f"add_user {tg_id}")
    await update.message.reply_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ–¥–∞–Ω–æ.")
    await update.message.reply_text(
        "–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_users")]])
    )
    return ConversationHandler.END


@admin_only
async def change_role_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.message.edit_text(
        "–í–≤–µ–¥—ñ—Ç—å Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_users")]])
    )
    return CHANGE_ROLE_ID


@admin_only
async def change_role_get_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        tg_id = int(update.message.text.strip())
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–∏–π ID:")
        return CHANGE_ROLE_ID
    user = await get_user_by_tg_id(tg_id)
    if not user:
        await update.message.reply_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return CHANGE_ROLE_ID
    context.user_data['edit_user_id'] = tg_id
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Ä–æ–ª—å (user/admin):")
    return CHANGE_ROLE_ROLE


@admin_only
async def change_role_finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    role = update.message.text.strip().lower()
    if role not in {"user", "admin"}:
        await update.message.reply_text("–†–æ–ª—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ 'user' –∞–±–æ 'admin'.")
        return CHANGE_ROLE_ROLE
    tg_id = context.user_data.pop('edit_user_id', None)
    if tg_id is None:
        await update.message.reply_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return ConversationHandler.END
    await update_user(tg_id, {"role": role})
    await log_admin_action(update.effective_user.id, f"set_role {tg_id} {role}")
    await update.message.reply_text(f"–†–æ–ª—å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {role}.")
    await update.message.reply_text(
        "–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_users")]])
    )
    return ConversationHandler.END


@admin_only
async def block_user_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.message.edit_text(
        "–í–≤–µ–¥—ñ—Ç—å Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_users")]])
    )
    return BLOCK_USER_ID


@admin_only
async def block_user_finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        tg_id = int(update.message.text.strip())
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–∏–π ID:")
        return BLOCK_USER_ID
    user = await get_user_by_tg_id(tg_id)
    if not user:
        await update.message.reply_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    else:
        new_status = not user["is_active"]
        await update_user(tg_id, {"is_active": new_status})
        action = "unblock" if new_status else "block"
        await log_admin_action(update.effective_user.id, f"{action} {tg_id}")
        text = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ." if new_status else "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ."
        await update.message.reply_text(text)
    await update.message.reply_text(
        "–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_users")]])
    )
    return ConversationHandler.END


@admin_only
async def change_name_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.message.edit_text(
        "–í–≤–µ–¥—ñ—Ç—å Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_users")]])
    )
    return CHANGE_NAME_ID


@admin_only
async def change_name_get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        tg_id = int(update.message.text.strip())
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–∏–π ID:")
        return CHANGE_NAME_ID
    user = await get_user_by_tg_id(tg_id)
    if not user:
        await update.message.reply_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return CHANGE_NAME_ID
    context.user_data['change_name_id'] = tg_id
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ü–Ü–ë:")
    return CHANGE_NAME_NAME


@admin_only
async def change_name_finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = context.user_data.pop('change_name_id', None)
    if tg_id is None:
        await update.message.reply_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return ConversationHandler.END
    full_name = update.message.text.strip()
    await update_user(tg_id, {"full_name": full_name})
    await log_admin_action(update.effective_user.id, f"change_full_name {tg_id}")
    await update.message.reply_text("‚úÖ –ü–Ü–ë –æ–Ω–æ–≤–ª–µ–Ω–æ")
    await update.message.reply_text(
        "–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_users")]])
    )
    return ConversationHandler.END


@admin_only
async def admin_delete_handler(update, context):
    msg = getattr(update, 'message', None)
    if msg:
        await msg.reply_text("–í–∏–¥–∞–ª–µ–Ω–Ω—è –æ–±‚Äô—î–∫—Ç—ñ–≤ ‚Äî –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.")
    else:
        await update.callback_query.edit_message_text("–í–∏–¥–∞–ª–µ–Ω–Ω—è –æ–±‚Äô—î–∫—Ç—ñ–≤ ‚Äî –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.", reply_markup=InlineKeyboardMarkup([]))

@admin_only
async def admin_tov_edit_handler(update, context):
    companies = await get_companies()
    text = "<b>–û–±–µ—Ä—ñ—Ç—å –¢–û–í –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:</b>"
    if not companies:
        text = "–ù–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –¢–û–í-–æ—Ä–µ–Ω–¥–∞—Ä—è."
    keyboard = [
        [InlineKeyboardButton(
            f"{c['short_name'] or c['full_name']}", callback_data=f"company_edit:{c['id']}"
        )]
        for c in companies
    ] if companies else []
    inline_kb = InlineKeyboardMarkup(keyboard)
    msg = getattr(update, 'message', None)
    if msg:
        await msg.reply_text(text, reply_markup=inline_kb, parse_mode="HTML")
    else:
        await update.callback_query.edit_message_text(text, reply_markup=inline_kb, parse_mode="HTML")

@admin_only
async def admin_tov_delete_handler(update, context):
    companies = await get_companies()
    text = "<b>–û–±–µ—Ä—ñ—Ç—å –¢–û–í –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:</b>"
    if not companies:
        text = "–ù–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –¢–û–í-–æ—Ä–µ–Ω–¥–∞—Ä—è."
    keyboard = [
        [InlineKeyboardButton(
            f"{c['short_name'] or c['full_name']}", callback_data=f"company_delete:{c['id']}"
        )]
        for c in companies
    ] if companies else []
    keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ê–¥–º—ñ–Ω–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    msg = getattr(update, 'message', None)
    if msg:
        await msg.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")
    else:
        await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")

@admin_only
async def to_admin_panel(update, context):
    from keyboards.menu import admin_panel_menu
    msg = getattr(update, 'message', None)
    if msg:
        await msg.reply_text("üõ°Ô∏è –ê–¥–º—ñ–Ω–ø–∞–Ω–µ–ª—å:", reply_markup=admin_panel_menu)
    else:
        await update.callback_query.edit_message_text("üõ°Ô∏è –ê–¥–º—ñ–Ω–ø–∞–Ω–µ–ª—å:", reply_markup=admin_panel_menu)


# --- –ö–æ–º–∞–Ω–¥–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ ---

@admin_only
async def cmd_list_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = await get_users()
    lines = [f"{u['telegram_id']} | {u['role']} | {'–∞–∫—Ç–∏–≤–Ω–∏–π' if u['is_active'] else '–∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π'}" for u in users]
    text = "\n".join(lines) if lines else "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
    await update.message.reply_text(text)

@admin_only
async def cmd_add_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text('–í–∫–∞–∂—ñ—Ç—å Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.')
        return
    tg_id = int(context.args[0])
    user = await get_user_by_tg_id(tg_id)
    if user:
        await update.message.reply_text('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î.')
        return
    await add_user(tg_id)
    await log_admin_action(update.effective_user.id, f"add_user {tg_id}")
    await update.message.reply_text('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ–¥–∞–Ω–æ.')

@admin_only
async def cmd_promote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text('–í–∫–∞–∂—ñ—Ç—å Telegram ID.')
        return
    tg_id = int(context.args[0])
    await update_user(tg_id, {'role': 'admin'})
    await log_admin_action(update.effective_user.id, f"promote {tg_id}")
    await update.message.reply_text('–†–æ–ª—å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ admin.')

@admin_only
async def cmd_demote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text('–í–∫–∞–∂—ñ—Ç—å Telegram ID.')
        return
    tg_id = int(context.args[0])
    await update_user(tg_id, {'role': 'user'})
    await log_admin_action(update.effective_user.id, f"demote {tg_id}")
    await update.message.reply_text('–†–æ–ª—å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ user.')

@admin_only
async def cmd_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text('–í–∫–∞–∂—ñ—Ç—å Telegram ID.')
        return
    tg_id = int(context.args[0])
    await update_user(tg_id, {'is_active': False})
    await log_admin_action(update.effective_user.id, f"block {tg_id}")
    await update.message.reply_text('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.')

@admin_only
async def cmd_unblock(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text('–í–∫–∞–∂—ñ—Ç—å Telegram ID.')
        return
    tg_id = int(context.args[0])
    await update_user(tg_id, {'is_active': True})
    await log_admin_action(update.effective_user.id, f"unblock {tg_id}")
    await update.message.reply_text('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ.')


# --- Conversation handlers for user management ---
add_user_conv = ConversationHandler(
    entry_points=[CallbackQueryHandler(add_user_start, pattern=r"^user_add$")],
    states={
        ADD_USER_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_user_get_name)],
        ADD_USER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_user_finish)],
    },
    fallbacks=[CallbackQueryHandler(admin_users_handler, pattern=r"^admin_users$")]
)

change_role_conv = ConversationHandler(
    entry_points=[CallbackQueryHandler(change_role_start, pattern=r"^user_role$")],
    states={
        CHANGE_ROLE_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, change_role_get_role)],
        CHANGE_ROLE_ROLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, change_role_finish)],
    },
    fallbacks=[CallbackQueryHandler(admin_users_handler, pattern=r"^admin_users$")]
)

block_user_conv = ConversationHandler(
    entry_points=[CallbackQueryHandler(block_user_start, pattern=r"^user_block$")],
    states={
        BLOCK_USER_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, block_user_finish)],
    },
    fallbacks=[CallbackQueryHandler(admin_users_handler, pattern=r"^admin_users$")]
)

change_name_conv = ConversationHandler(
    entry_points=[CallbackQueryHandler(change_name_start, pattern=r"^user_fullname$")],
    states={
        CHANGE_NAME_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, change_name_get_name)],
        CHANGE_NAME_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, change_name_finish)],
    },
    fallbacks=[CallbackQueryHandler(admin_users_handler, pattern=r"^admin_users$")]
)
